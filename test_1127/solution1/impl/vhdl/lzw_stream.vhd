-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lzw_stream is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of lzw_stream is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lzw_stream_lzw_stream,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=68,HLS_SYN_DSP=0,HLS_SYN_FF=4642,HLS_SYN_LUT=14895,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv26_3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal s1 : STD_LOGIC_VECTOR (63 downto 0);
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal file_buffer : STD_LOGIC_VECTOR (63 downto 0);
    signal total_bytes : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_340 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_340_pp2_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state6_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal add_ln269_fu_368_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln278_fu_385_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_3_fu_414_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_3_reg_1847 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln297_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln297_reg_1852 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln17_2_fu_684_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_2_reg_1856 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln18_2_reg_1861 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln18_2_fu_718_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln18_2_reg_1867 : STD_LOGIC_VECTOR (25 downto 0);
    signal xor_ln17_1_fu_740_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln17_1_reg_1872 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln17_5_fu_1063_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_5_reg_1877 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state7_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state11_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal lshr_ln18_5_reg_1882 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln18_8_fu_1097_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln18_8_reg_1888 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln16_11_fu_1103_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln16_11_reg_1893 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln16_1_reg_1898 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln18_8_fu_1409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln18_8_reg_1903 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln18_13_fu_1467_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln18_13_reg_1909 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln17_19_fu_1473_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln17_19_reg_1914 : STD_LOGIC_VECTOR (14 downto 0);
    signal hash_table_addr_1_reg_1919 : STD_LOGIC_VECTOR (14 downto 0);
    signal valid_fu_1680_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal valid_reg_1924 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_load_reg_1928 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln85_fu_1721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_1933 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_middle_key_mem_addr_reg_1937 : STD_LOGIC_VECTOR (8 downto 0);
    signal mem_lower_key_mem_addr_reg_1942 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal hash_table_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal hash_table_ce0 : STD_LOGIC;
    signal hash_table_we0 : STD_LOGIC;
    signal hash_table_d0 : STD_LOGIC_VECTOR (32 downto 0);
    signal hash_table_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal my_assoc_mem_upper_key_mem_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal my_assoc_mem_upper_key_mem_ce0 : STD_LOGIC;
    signal my_assoc_mem_upper_key_mem_we0 : STD_LOGIC;
    signal my_assoc_mem_upper_key_mem_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal my_assoc_mem_upper_key_mem_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal my_assoc_mem_middle_key_mem_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal my_assoc_mem_middle_key_mem_ce0 : STD_LOGIC;
    signal my_assoc_mem_middle_key_mem_we0 : STD_LOGIC;
    signal my_assoc_mem_middle_key_mem_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal my_assoc_mem_middle_key_mem_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal my_assoc_mem_lower_key_mem_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal my_assoc_mem_lower_key_mem_ce0 : STD_LOGIC;
    signal my_assoc_mem_lower_key_mem_we0 : STD_LOGIC;
    signal my_assoc_mem_lower_key_mem_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal my_assoc_mem_lower_key_mem_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal my_assoc_mem_value_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal my_assoc_mem_value_ce0 : STD_LOGIC;
    signal my_assoc_mem_value_we0 : STD_LOGIC;
    signal my_assoc_mem_value_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal my_assoc_mem_value_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_hardware_encoder_fu_352_ap_start : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_ap_done : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_ap_idle : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_ap_ready : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hardware_encoder_fu_352_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_hash_table_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_hardware_encoder_fu_352_hash_table_ce0 : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_hash_table_we0 : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_hash_table_d0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_hardware_encoder_fu_352_my_assoc_mem_upper_key_mem_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_hardware_encoder_fu_352_my_assoc_mem_upper_key_mem_ce0 : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_my_assoc_mem_upper_key_mem_we0 : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_my_assoc_mem_upper_key_mem_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hardware_encoder_fu_352_my_assoc_mem_middle_key_mem_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_hardware_encoder_fu_352_my_assoc_mem_middle_key_mem_ce0 : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_my_assoc_mem_middle_key_mem_we0 : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_my_assoc_mem_middle_key_mem_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hardware_encoder_fu_352_my_assoc_mem_lower_key_mem_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_hardware_encoder_fu_352_my_assoc_mem_lower_key_mem_ce0 : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_my_assoc_mem_lower_key_mem_we0 : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_my_assoc_mem_lower_key_mem_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hardware_encoder_fu_352_my_assoc_mem_value_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_hardware_encoder_fu_352_my_assoc_mem_value_ce0 : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_my_assoc_mem_value_we0 : STD_LOGIC;
    signal grp_hardware_encoder_fu_352_my_assoc_mem_value_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_318 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln269_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_1_reg_329 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln278_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_phi_mux_i_2_phi_fu_344_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal grp_hardware_encoder_fu_352_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_cast_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_fu_1655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal zext_ln88_fu_1727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln89_fu_1732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_fu_1737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_48_fu_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln91_fu_1742_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal my_assoc_mem_fill_fu_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln1_fu_1688_p6 : STD_LOGIC_VECTOR (32 downto 0);
    signal or_ln87_fu_1767_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln88_fu_1774_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln89_fu_1781_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_fu_1706_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln301_1_fu_426_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_430_p6 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_448_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln16_1_fu_456_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln16_fu_444_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln16_fu_460_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_470_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln17_fu_466_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln17_fu_478_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal lshr_ln_fu_484_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln18_fu_494_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal xor_ln18_fu_498_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_fu_508_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln16_3_fu_516_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln16_2_fu_504_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln16_1_fu_520_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln17_fu_530_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln17_13_fu_546_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln17_1_fu_534_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln17_1_fu_526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_1_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln18_1_fu_564_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln18_2_fu_582_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1_fu_550_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln17_2_fu_542_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln18_1_fu_574_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_606_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln18_1_fu_586_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln18_fu_578_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln18_fu_594_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln16_4_fu_614_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln18_1_fu_600_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_2_fu_644_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln16_4_fu_624_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln16_7_fu_618_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln16_5_fu_640_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal xor_ln16_fu_634_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln17_14_fu_672_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln17_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln17_3_fu_662_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln17_fu_656_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln18_4_fu_706_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln17_1_fu_676_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln17_11_fu_666_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln18_3_fu_710_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln18_1_fu_700_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln16_6_fu_730_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln16_8_fu_724_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln18_2_fu_746_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_754_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln16_6_fu_762_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln18_2_fu_749_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_3_fu_774_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln16_7_fu_770_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal xor_ln16_1_fu_766_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln17_15_fu_796_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln17_2_fu_780_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_3_fu_808_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln18_3_fu_814_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln17_4_fu_786_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln18_6_fu_833_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln17_2_fu_800_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln17_12_fu_790_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln18_3_fu_824_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_857_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln18_5_fu_837_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln18_3_fu_828_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln18_4_fu_845_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln16_8_fu_865_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln18_3_fu_851_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_4_fu_895_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln16_8_fu_875_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln16_9_fu_869_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln16_9_fu_891_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal xor_ln16_2_fu_885_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln17_16_fu_923_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln17_3_fu_901_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_4_fu_935_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln18_4_fu_941_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln17_5_fu_913_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln17_2_fu_907_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln18_8_fu_961_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln17_3_fu_927_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln17_13_fu_917_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln18_4_fu_951_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_985_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln18_7_fu_965_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln18_5_fu_955_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln18_6_fu_973_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln16_10_fu_993_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln18_4_fu_979_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_5_fu_1023_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln16_s_fu_1003_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln16_10_fu_997_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln16_11_fu_1019_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal xor_ln16_3_fu_1013_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln17_17_fu_1051_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln17_4_fu_1029_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln17_6_fu_1041_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln17_3_fu_1035_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln18_11_fu_1085_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln17_4_fu_1055_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln17_14_fu_1045_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln18_9_fu_1089_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln18_7_fu_1079_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln18_5_fu_1119_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1127_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln16_12_fu_1135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln18_5_fu_1122_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_6_fu_1147_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln16_13_fu_1143_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal xor_ln16_4_fu_1139_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln17_18_fu_1173_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln17_5_fu_1153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_6_fu_1185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln18_6_fu_1191_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln17_7_fu_1163_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln17_4_fu_1159_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln18_13_fu_1211_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln17_5_fu_1177_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln17_15_fu_1167_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln18_6_fu_1201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln18_6_fu_1229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln18_s_fu_1215_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln18_9_fu_1205_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln18_10_fu_1223_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln17_19_fu_1263_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln17_6_fu_1235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_7_fu_1275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln18_7_fu_1281_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln17_6_fu_1247_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln17_16_fu_1241_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln18_15_fu_1301_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln17_7_fu_1267_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal xor_ln17_5_fu_1257_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln18_7_fu_1291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln18_7_fu_1319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln18_10_fu_1305_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln18_11_fu_1295_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln18_11_fu_1313_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln17_20_fu_1353_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln17_7_fu_1325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_8_fu_1365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln18_8_fu_1371_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln17_8_fu_1337_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln17_17_fu_1331_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln18_17_fu_1391_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln17_9_fu_1357_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal xor_ln17_6_fu_1347_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln18_8_fu_1381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln18_12_fu_1395_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln18_12_fu_1385_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln18_12_fu_1403_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln17_21_fu_1437_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln17_s_fu_1421_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln17_18_fu_1415_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln18_21_fu_1455_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln17_10_fu_1441_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal xor_ln17_7_fu_1431_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln18_14_fu_1459_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln18_13_fu_1449_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln17_8_fu_1479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_9_fu_1484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln18_9_fu_1489_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln18_9_fu_1499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln18_9_fu_1503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln17_22_fu_1530_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln17_9_fu_1509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln17_11_fu_1515_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln18_22_fu_1553_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln17_12_fu_1534_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal xor_ln17_8_fu_1525_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln17_10_fu_1542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln18_16_fu_1557_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln18_14_fu_1548_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln18_18_fu_1571_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln18_14_fu_1565_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal xor_ln18_10_fu_1597_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln18_19_fu_1587_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln18_15_fu_1581_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln20_fu_1615_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln20_fu_1603_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln3_fu_1619_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln20_fu_1609_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal hashed_fu_1627_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln4_fu_1639_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln10_fu_1633_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal hashed_1_fu_1649_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal value_fu_1660_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_1711_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln_fu_1670_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln301_fu_1664_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln87_fu_1758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln87_fu_1763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component lzw_stream_hardware_encoder IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        s1 : IN STD_LOGIC_VECTOR (63 downto 0);
        length_r : IN STD_LOGIC_VECTOR (31 downto 0);
        file_buffer : IN STD_LOGIC_VECTOR (63 downto 0);
        total_bytes : IN STD_LOGIC_VECTOR (63 downto 0);
        hash_table_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        hash_table_ce0 : OUT STD_LOGIC;
        hash_table_we0 : OUT STD_LOGIC;
        hash_table_d0 : OUT STD_LOGIC_VECTOR (32 downto 0);
        hash_table_q0 : IN STD_LOGIC_VECTOR (32 downto 0);
        my_assoc_mem_upper_key_mem_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        my_assoc_mem_upper_key_mem_ce0 : OUT STD_LOGIC;
        my_assoc_mem_upper_key_mem_we0 : OUT STD_LOGIC;
        my_assoc_mem_upper_key_mem_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        my_assoc_mem_upper_key_mem_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        my_assoc_mem_middle_key_mem_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        my_assoc_mem_middle_key_mem_ce0 : OUT STD_LOGIC;
        my_assoc_mem_middle_key_mem_we0 : OUT STD_LOGIC;
        my_assoc_mem_middle_key_mem_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        my_assoc_mem_middle_key_mem_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        my_assoc_mem_lower_key_mem_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        my_assoc_mem_lower_key_mem_ce0 : OUT STD_LOGIC;
        my_assoc_mem_lower_key_mem_we0 : OUT STD_LOGIC;
        my_assoc_mem_lower_key_mem_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        my_assoc_mem_lower_key_mem_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        my_assoc_mem_value_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        my_assoc_mem_value_ce0 : OUT STD_LOGIC;
        my_assoc_mem_value_we0 : OUT STD_LOGIC;
        my_assoc_mem_value_d0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        my_assoc_mem_value_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        my_assoc_mem_fill_read : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lzw_stream_hash_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (32 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component lzw_stream_my_assoc_mem_upper_key_mem IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lzw_stream_my_assoc_mem_value IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component lzw_stream_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        s1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        file_buffer : OUT STD_LOGIC_VECTOR (63 downto 0);
        total_bytes : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component lzw_stream_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component lzw_stream_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        s1 => s1,
        length_r => length_r,
        file_buffer => file_buffer,
        total_bytes => total_bytes,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem_m_axi_U : component lzw_stream_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => grp_hardware_encoder_fu_352_m_axi_gmem_ARADDR,
        I_ARID => grp_hardware_encoder_fu_352_m_axi_gmem_ARID,
        I_ARLEN => grp_hardware_encoder_fu_352_m_axi_gmem_ARLEN,
        I_ARSIZE => grp_hardware_encoder_fu_352_m_axi_gmem_ARSIZE,
        I_ARLOCK => grp_hardware_encoder_fu_352_m_axi_gmem_ARLOCK,
        I_ARCACHE => grp_hardware_encoder_fu_352_m_axi_gmem_ARCACHE,
        I_ARQOS => grp_hardware_encoder_fu_352_m_axi_gmem_ARQOS,
        I_ARPROT => grp_hardware_encoder_fu_352_m_axi_gmem_ARPROT,
        I_ARUSER => grp_hardware_encoder_fu_352_m_axi_gmem_ARUSER,
        I_ARBURST => grp_hardware_encoder_fu_352_m_axi_gmem_ARBURST,
        I_ARREGION => grp_hardware_encoder_fu_352_m_axi_gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => grp_hardware_encoder_fu_352_m_axi_gmem_AWADDR,
        I_AWID => grp_hardware_encoder_fu_352_m_axi_gmem_AWID,
        I_AWLEN => grp_hardware_encoder_fu_352_m_axi_gmem_AWLEN,
        I_AWSIZE => grp_hardware_encoder_fu_352_m_axi_gmem_AWSIZE,
        I_AWLOCK => grp_hardware_encoder_fu_352_m_axi_gmem_AWLOCK,
        I_AWCACHE => grp_hardware_encoder_fu_352_m_axi_gmem_AWCACHE,
        I_AWQOS => grp_hardware_encoder_fu_352_m_axi_gmem_AWQOS,
        I_AWPROT => grp_hardware_encoder_fu_352_m_axi_gmem_AWPROT,
        I_AWUSER => grp_hardware_encoder_fu_352_m_axi_gmem_AWUSER,
        I_AWBURST => grp_hardware_encoder_fu_352_m_axi_gmem_AWBURST,
        I_AWREGION => grp_hardware_encoder_fu_352_m_axi_gmem_AWREGION,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => grp_hardware_encoder_fu_352_m_axi_gmem_WDATA,
        I_WID => grp_hardware_encoder_fu_352_m_axi_gmem_WID,
        I_WUSER => grp_hardware_encoder_fu_352_m_axi_gmem_WUSER,
        I_WLAST => grp_hardware_encoder_fu_352_m_axi_gmem_WLAST,
        I_WSTRB => grp_hardware_encoder_fu_352_m_axi_gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    hash_table_U : component lzw_stream_hash_table
    generic map (
        DataWidth => 33,
        AddressRange => 32768,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hash_table_address0,
        ce0 => hash_table_ce0,
        we0 => hash_table_we0,
        d0 => hash_table_d0,
        q0 => hash_table_q0);

    my_assoc_mem_upper_key_mem_U : component lzw_stream_my_assoc_mem_upper_key_mem
    generic map (
        DataWidth => 64,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => my_assoc_mem_upper_key_mem_address0,
        ce0 => my_assoc_mem_upper_key_mem_ce0,
        we0 => my_assoc_mem_upper_key_mem_we0,
        d0 => my_assoc_mem_upper_key_mem_d0,
        q0 => my_assoc_mem_upper_key_mem_q0);

    my_assoc_mem_middle_key_mem_U : component lzw_stream_my_assoc_mem_upper_key_mem
    generic map (
        DataWidth => 64,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => my_assoc_mem_middle_key_mem_address0,
        ce0 => my_assoc_mem_middle_key_mem_ce0,
        we0 => my_assoc_mem_middle_key_mem_we0,
        d0 => my_assoc_mem_middle_key_mem_d0,
        q0 => my_assoc_mem_middle_key_mem_q0);

    my_assoc_mem_lower_key_mem_U : component lzw_stream_my_assoc_mem_upper_key_mem
    generic map (
        DataWidth => 64,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => my_assoc_mem_lower_key_mem_address0,
        ce0 => my_assoc_mem_lower_key_mem_ce0,
        we0 => my_assoc_mem_lower_key_mem_we0,
        d0 => my_assoc_mem_lower_key_mem_d0,
        q0 => my_assoc_mem_lower_key_mem_q0);

    my_assoc_mem_value_U : component lzw_stream_my_assoc_mem_value
    generic map (
        DataWidth => 12,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => my_assoc_mem_value_address0,
        ce0 => my_assoc_mem_value_ce0,
        we0 => my_assoc_mem_value_we0,
        d0 => my_assoc_mem_value_d0,
        q0 => my_assoc_mem_value_q0);

    grp_hardware_encoder_fu_352 : component lzw_stream_hardware_encoder
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_hardware_encoder_fu_352_ap_start,
        ap_done => grp_hardware_encoder_fu_352_ap_done,
        ap_idle => grp_hardware_encoder_fu_352_ap_idle,
        ap_ready => grp_hardware_encoder_fu_352_ap_ready,
        m_axi_gmem_AWVALID => grp_hardware_encoder_fu_352_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_hardware_encoder_fu_352_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_hardware_encoder_fu_352_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_hardware_encoder_fu_352_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_hardware_encoder_fu_352_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_hardware_encoder_fu_352_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_hardware_encoder_fu_352_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_hardware_encoder_fu_352_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_hardware_encoder_fu_352_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_hardware_encoder_fu_352_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_hardware_encoder_fu_352_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_hardware_encoder_fu_352_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_hardware_encoder_fu_352_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_hardware_encoder_fu_352_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_hardware_encoder_fu_352_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_hardware_encoder_fu_352_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_hardware_encoder_fu_352_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_hardware_encoder_fu_352_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_hardware_encoder_fu_352_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_hardware_encoder_fu_352_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_hardware_encoder_fu_352_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_hardware_encoder_fu_352_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_hardware_encoder_fu_352_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_hardware_encoder_fu_352_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_hardware_encoder_fu_352_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_hardware_encoder_fu_352_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_hardware_encoder_fu_352_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_hardware_encoder_fu_352_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_hardware_encoder_fu_352_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_hardware_encoder_fu_352_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_hardware_encoder_fu_352_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => gmem_RLAST,
        m_axi_gmem_RID => gmem_RID,
        m_axi_gmem_RUSER => gmem_RUSER,
        m_axi_gmem_RRESP => gmem_RRESP,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_hardware_encoder_fu_352_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => gmem_BRESP,
        m_axi_gmem_BID => gmem_BID,
        m_axi_gmem_BUSER => gmem_BUSER,
        s1 => s1,
        length_r => length_r,
        file_buffer => file_buffer,
        total_bytes => total_bytes,
        hash_table_address0 => grp_hardware_encoder_fu_352_hash_table_address0,
        hash_table_ce0 => grp_hardware_encoder_fu_352_hash_table_ce0,
        hash_table_we0 => grp_hardware_encoder_fu_352_hash_table_we0,
        hash_table_d0 => grp_hardware_encoder_fu_352_hash_table_d0,
        hash_table_q0 => hash_table_q0,
        my_assoc_mem_upper_key_mem_address0 => grp_hardware_encoder_fu_352_my_assoc_mem_upper_key_mem_address0,
        my_assoc_mem_upper_key_mem_ce0 => grp_hardware_encoder_fu_352_my_assoc_mem_upper_key_mem_ce0,
        my_assoc_mem_upper_key_mem_we0 => grp_hardware_encoder_fu_352_my_assoc_mem_upper_key_mem_we0,
        my_assoc_mem_upper_key_mem_d0 => grp_hardware_encoder_fu_352_my_assoc_mem_upper_key_mem_d0,
        my_assoc_mem_upper_key_mem_q0 => my_assoc_mem_upper_key_mem_q0,
        my_assoc_mem_middle_key_mem_address0 => grp_hardware_encoder_fu_352_my_assoc_mem_middle_key_mem_address0,
        my_assoc_mem_middle_key_mem_ce0 => grp_hardware_encoder_fu_352_my_assoc_mem_middle_key_mem_ce0,
        my_assoc_mem_middle_key_mem_we0 => grp_hardware_encoder_fu_352_my_assoc_mem_middle_key_mem_we0,
        my_assoc_mem_middle_key_mem_d0 => grp_hardware_encoder_fu_352_my_assoc_mem_middle_key_mem_d0,
        my_assoc_mem_middle_key_mem_q0 => my_assoc_mem_middle_key_mem_q0,
        my_assoc_mem_lower_key_mem_address0 => grp_hardware_encoder_fu_352_my_assoc_mem_lower_key_mem_address0,
        my_assoc_mem_lower_key_mem_ce0 => grp_hardware_encoder_fu_352_my_assoc_mem_lower_key_mem_ce0,
        my_assoc_mem_lower_key_mem_we0 => grp_hardware_encoder_fu_352_my_assoc_mem_lower_key_mem_we0,
        my_assoc_mem_lower_key_mem_d0 => grp_hardware_encoder_fu_352_my_assoc_mem_lower_key_mem_d0,
        my_assoc_mem_lower_key_mem_q0 => my_assoc_mem_lower_key_mem_q0,
        my_assoc_mem_value_address0 => grp_hardware_encoder_fu_352_my_assoc_mem_value_address0,
        my_assoc_mem_value_ce0 => grp_hardware_encoder_fu_352_my_assoc_mem_value_ce0,
        my_assoc_mem_value_we0 => grp_hardware_encoder_fu_352_my_assoc_mem_value_we0,
        my_assoc_mem_value_d0 => grp_hardware_encoder_fu_352_my_assoc_mem_value_d0,
        my_assoc_mem_value_q0 => my_assoc_mem_value_q0,
        my_assoc_mem_fill_read => my_assoc_mem_fill_fu_198);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_hardware_encoder_fu_352_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hardware_encoder_fu_352_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_hardware_encoder_fu_352_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_hardware_encoder_fu_352_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hardware_encoder_fu_352_ap_ready = ap_const_logic_1)) then 
                    grp_hardware_encoder_fu_352_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    empty_48_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                empty_48_fu_194 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln85_fu_1721_p2 = ap_const_lv1_1) and (valid_fu_1680_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                empty_48_fu_194 <= add_ln91_fu_1742_p2;
            end if; 
        end if;
    end process;

    i_1_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_1_reg_329 <= ap_const_lv10_0;
            elsif (((icmp_ln278_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_reg_329 <= add_ln278_fu_385_p2;
            end if; 
        end if;
    end process;

    i_2_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_2_reg_340 <= ap_const_lv9_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln297_reg_1852 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_2_reg_340 <= i_3_reg_1847;
            end if; 
        end if;
    end process;

    i_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_318 <= ap_const_lv16_0;
            elsif (((icmp_ln269_fu_374_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_318 <= add_ln269_fu_368_p2;
            end if; 
        end if;
    end process;

    my_assoc_mem_fill_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                my_assoc_mem_fill_fu_198 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln85_fu_1721_p2 = ap_const_lv1_1) and (valid_fu_1680_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                my_assoc_mem_fill_fu_198 <= add_ln91_fu_1742_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln297_reg_1852 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                add_ln16_11_reg_1893 <= add_ln16_11_fu_1103_p2;
                add_ln17_5_reg_1877 <= add_ln17_5_fu_1063_p2;
                add_ln18_8_reg_1888 <= add_ln18_8_fu_1097_p2;
                lshr_ln18_5_reg_1882 <= add_ln17_5_fu_1063_p2(31 downto 6);
                trunc_ln16_1_reg_1898 <= add_ln17_5_fu_1063_p2(20 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln17_19_reg_1914 <= add_ln17_19_fu_1473_p2;
                add_ln18_13_reg_1909 <= add_ln18_13_fu_1467_p2;
                i_2_reg_340_pp2_iter1_reg <= i_2_reg_340;
                icmp_ln297_reg_1852 <= icmp_ln297_fu_420_p2;
                valid_reg_1924 <= hash_table_q0(32 downto 32);
                xor_ln18_8_reg_1903 <= xor_ln18_8_fu_1409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln297_fu_420_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln17_2_reg_1856 <= add_ln17_2_fu_684_p2;
                add_ln18_2_reg_1867 <= add_ln18_2_fu_718_p2;
                lshr_ln18_2_reg_1861 <= add_ln17_2_fu_684_p2(31 downto 6);
                xor_ln17_1_reg_1872 <= xor_ln17_1_fu_740_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                hash_table_addr_1_reg_1919 <= zext_ln60_fu_1655_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                i_3_reg_1847 <= i_3_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((valid_fu_1680_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln85_reg_1933 <= icmp_ln85_fu_1721_p2;
                p_load_reg_1928 <= empty_48_fu_194;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_1721_p2 = ap_const_lv1_1) and (valid_fu_1680_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                    mem_lower_key_mem_addr_reg_1942(8) <= zext_ln89_fu_1732_p1(9 - 1 downto 0)(8);
                    mem_middle_key_mem_addr_reg_1937(6 downto 0) <= zext_ln88_fu_1727_p1(9 - 1 downto 0)(6 downto 0);
            end if;
        end if;
    end process;
    mem_middle_key_mem_addr_reg_1937(8 downto 7) <= "00";
    mem_lower_key_mem_addr_reg_1942(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_enable_reg_pp2_iter0, icmp_ln297_fu_420_p2, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1_subdone, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_ap_done, icmp_ln269_fu_374_p2, icmp_ln278_fu_391_p2, ap_CS_fsm_state13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln269_fu_374_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln278_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln297_fu_420_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln297_fu_420_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((not(((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_hardware_encoder_fu_352_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln10_fu_1633_p2 <= std_logic_vector(unsigned(trunc_ln3_fu_1619_p3) + unsigned(xor_ln20_fu_1609_p2));
    add_ln16_10_fu_997_p2 <= std_logic_vector(unsigned(trunc_ln18_7_fu_965_p3) + unsigned(add_ln18_5_fu_955_p2));
    add_ln16_11_fu_1103_p2 <= std_logic_vector(unsigned(trunc_ln18_9_fu_1089_p3) + unsigned(add_ln18_7_fu_1079_p2));
    add_ln16_1_fu_520_p2 <= std_logic_vector(unsigned(zext_ln16_3_fu_516_p1) + unsigned(zext_ln16_2_fu_504_p1));
    add_ln16_2_fu_644_p2 <= std_logic_vector(unsigned(zext_ln16_4_fu_614_p1) + unsigned(xor_ln18_1_fu_600_p2));
    add_ln16_3_fu_774_p2 <= std_logic_vector(unsigned(zext_ln16_6_fu_762_p1) + unsigned(xor_ln18_2_fu_749_p2));
    add_ln16_4_fu_895_p2 <= std_logic_vector(unsigned(zext_ln16_8_fu_865_p1) + unsigned(xor_ln18_3_fu_851_p2));
    add_ln16_5_fu_1023_p2 <= std_logic_vector(unsigned(zext_ln16_10_fu_993_p1) + unsigned(xor_ln18_4_fu_979_p2));
    add_ln16_6_fu_1147_p2 <= std_logic_vector(unsigned(zext_ln16_12_fu_1135_p1) + unsigned(xor_ln18_5_fu_1122_p2));
    add_ln16_7_fu_618_p2 <= std_logic_vector(unsigned(trunc_ln18_1_fu_586_p3) + unsigned(trunc_ln18_fu_578_p1));
    add_ln16_8_fu_724_p2 <= std_logic_vector(unsigned(trunc_ln18_3_fu_710_p3) + unsigned(add_ln18_1_fu_700_p2));
    add_ln16_9_fu_869_p2 <= std_logic_vector(unsigned(trunc_ln18_5_fu_837_p3) + unsigned(add_ln18_3_fu_828_p2));
    add_ln16_fu_460_p2 <= std_logic_vector(unsigned(zext_ln16_1_fu_456_p1) + unsigned(zext_ln16_fu_444_p1));
    add_ln17_10_fu_1542_p2 <= std_logic_vector(unsigned(shl_ln17_9_fu_1509_p2) + unsigned(xor_ln18_9_fu_1503_p2));
    add_ln17_11_fu_666_p2 <= std_logic_vector(unsigned(zext_ln16_5_fu_640_p1) + unsigned(xor_ln16_fu_634_p2));
    add_ln17_12_fu_790_p2 <= std_logic_vector(unsigned(zext_ln16_7_fu_770_p1) + unsigned(xor_ln16_1_fu_766_p2));
    add_ln17_13_fu_917_p2 <= std_logic_vector(unsigned(zext_ln16_9_fu_891_p1) + unsigned(xor_ln16_2_fu_885_p2));
    add_ln17_14_fu_1045_p2 <= std_logic_vector(unsigned(zext_ln16_11_fu_1019_p1) + unsigned(xor_ln16_3_fu_1013_p2));
    add_ln17_15_fu_1167_p2 <= std_logic_vector(unsigned(zext_ln16_13_fu_1143_p1) + unsigned(xor_ln16_4_fu_1139_p2));
    add_ln17_16_fu_1241_p2 <= std_logic_vector(unsigned(trunc_ln18_s_fu_1215_p3) + unsigned(add_ln18_9_fu_1205_p2));
    add_ln17_17_fu_1331_p2 <= std_logic_vector(unsigned(trunc_ln18_10_fu_1305_p3) + unsigned(xor_ln18_11_fu_1295_p2));
    add_ln17_18_fu_1415_p2 <= std_logic_vector(unsigned(trunc_ln18_12_fu_1395_p3) + unsigned(xor_ln18_12_fu_1385_p2));
    add_ln17_19_fu_1473_p2 <= std_logic_vector(unsigned(trunc_ln18_14_fu_1459_p3) + unsigned(xor_ln18_13_fu_1449_p2));
    add_ln17_1_fu_558_p2 <= std_logic_vector(unsigned(shl_ln17_1_fu_534_p3) + unsigned(zext_ln17_1_fu_526_p1));
    add_ln17_2_fu_684_p2 <= std_logic_vector(unsigned(shl_ln17_fu_650_p2) + unsigned(add_ln16_2_fu_644_p2));
    add_ln17_3_fu_808_p2 <= std_logic_vector(unsigned(shl_ln17_2_fu_780_p2) + unsigned(add_ln16_3_fu_774_p2));
    add_ln17_4_fu_935_p2 <= std_logic_vector(unsigned(shl_ln17_3_fu_901_p2) + unsigned(add_ln16_4_fu_895_p2));
    add_ln17_5_fu_1063_p2 <= std_logic_vector(unsigned(shl_ln17_4_fu_1029_p2) + unsigned(add_ln16_5_fu_1023_p2));
    add_ln17_6_fu_1185_p2 <= std_logic_vector(unsigned(shl_ln17_5_fu_1153_p2) + unsigned(add_ln16_6_fu_1147_p2));
    add_ln17_7_fu_1275_p2 <= std_logic_vector(unsigned(shl_ln17_6_fu_1235_p2) + unsigned(xor_ln18_6_fu_1229_p2));
    add_ln17_8_fu_1365_p2 <= std_logic_vector(unsigned(shl_ln17_7_fu_1325_p2) + unsigned(xor_ln18_7_fu_1319_p2));
    add_ln17_9_fu_1484_p2 <= std_logic_vector(unsigned(shl_ln17_8_fu_1479_p2) + unsigned(xor_ln18_8_reg_1903));
    add_ln17_fu_478_p2 <= std_logic_vector(unsigned(shl_ln_fu_470_p3) + unsigned(zext_ln17_fu_466_p1));
    add_ln18_10_fu_1223_p2 <= std_logic_vector(unsigned(trunc_ln17_5_fu_1177_p3) + unsigned(add_ln17_15_fu_1167_p2));
    add_ln18_11_fu_1313_p2 <= std_logic_vector(unsigned(trunc_ln17_7_fu_1267_p3) + unsigned(xor_ln17_5_fu_1257_p2));
    add_ln18_12_fu_1403_p2 <= std_logic_vector(unsigned(trunc_ln17_9_fu_1357_p3) + unsigned(xor_ln17_6_fu_1347_p2));
    add_ln18_13_fu_1467_p2 <= std_logic_vector(unsigned(trunc_ln17_10_fu_1441_p3) + unsigned(xor_ln17_7_fu_1431_p2));
    add_ln18_14_fu_1565_p2 <= std_logic_vector(unsigned(trunc_ln17_12_fu_1534_p3) + unsigned(xor_ln17_8_fu_1525_p2));
    add_ln18_15_fu_1581_p2 <= std_logic_vector(unsigned(trunc_ln18_16_fu_1557_p3) + unsigned(xor_ln18_14_fu_1548_p2));
    add_ln18_1_fu_700_p2 <= std_logic_vector(unsigned(zext_ln17_3_fu_662_p1) + unsigned(xor_ln17_fu_656_p2));
    add_ln18_2_fu_718_p2 <= std_logic_vector(unsigned(trunc_ln17_1_fu_676_p3) + unsigned(add_ln17_11_fu_666_p2));
    add_ln18_3_fu_828_p2 <= std_logic_vector(unsigned(zext_ln17_4_fu_786_p1) + unsigned(xor_ln17_1_reg_1872));
    add_ln18_4_fu_845_p2 <= std_logic_vector(unsigned(trunc_ln17_2_fu_800_p3) + unsigned(add_ln17_12_fu_790_p2));
    add_ln18_5_fu_955_p2 <= std_logic_vector(unsigned(zext_ln17_5_fu_913_p1) + unsigned(xor_ln17_2_fu_907_p2));
    add_ln18_6_fu_973_p2 <= std_logic_vector(unsigned(trunc_ln17_3_fu_927_p3) + unsigned(add_ln17_13_fu_917_p2));
    add_ln18_7_fu_1079_p2 <= std_logic_vector(unsigned(zext_ln17_6_fu_1041_p1) + unsigned(xor_ln17_3_fu_1035_p2));
    add_ln18_8_fu_1097_p2 <= std_logic_vector(unsigned(trunc_ln17_4_fu_1055_p3) + unsigned(add_ln17_14_fu_1045_p2));
    add_ln18_9_fu_1205_p2 <= std_logic_vector(unsigned(zext_ln17_7_fu_1163_p1) + unsigned(xor_ln17_4_fu_1159_p2));
    add_ln18_fu_594_p2 <= std_logic_vector(unsigned(trunc_ln1_fu_550_p3) + unsigned(zext_ln17_2_fu_542_p1));
    add_ln269_fu_368_p2 <= std_logic_vector(unsigned(i_reg_318) + unsigned(ap_const_lv16_1));
    add_ln278_fu_385_p2 <= std_logic_vector(unsigned(i_1_reg_329) + unsigned(ap_const_lv10_1));
    add_ln91_fu_1742_p2 <= std_logic_vector(unsigned(empty_48_fu_194) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(7);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp2_exit_iter0_state6_assign_proc : process(icmp_ln297_fu_420_p2)
    begin
        if ((icmp_ln297_fu_420_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_hardware_encoder_fu_352_ap_done, ap_CS_fsm_state13)
    begin
        if (((grp_hardware_encoder_fu_352_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_2_phi_fu_344_p4_assign_proc : process(i_2_reg_340, ap_CS_fsm_pp2_stage0, i_3_reg_1847, icmp_ln297_reg_1852, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln297_reg_1852 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_i_2_phi_fu_344_p4 <= i_3_reg_1847;
        else 
            ap_phi_mux_i_2_phi_fu_344_p4 <= i_2_reg_340;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_hardware_encoder_fu_352_ap_done, ap_CS_fsm_state13)
    begin
        if (((grp_hardware_encoder_fu_352_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(grp_hardware_encoder_fu_352_m_axi_gmem_ARVALID, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_ARVALID <= grp_hardware_encoder_fu_352_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(grp_hardware_encoder_fu_352_m_axi_gmem_AWVALID, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_AWVALID <= grp_hardware_encoder_fu_352_m_axi_gmem_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(grp_hardware_encoder_fu_352_m_axi_gmem_BREADY, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_BREADY <= grp_hardware_encoder_fu_352_m_axi_gmem_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(grp_hardware_encoder_fu_352_m_axi_gmem_RREADY, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_RREADY <= grp_hardware_encoder_fu_352_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(grp_hardware_encoder_fu_352_m_axi_gmem_WVALID, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_WVALID <= grp_hardware_encoder_fu_352_m_axi_gmem_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_hardware_encoder_fu_352_ap_start <= grp_hardware_encoder_fu_352_ap_start_reg;

    hash_table_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_state2, ap_CS_fsm_pp2_stage1, hash_table_addr_1_reg_1919, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_hash_table_address0, ap_block_pp2_stage0, ap_CS_fsm_state13, i_cast_fu_380_p1, zext_ln60_fu_1655_p1, ap_block_pp2_stage1)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            hash_table_address0 <= hash_table_addr_1_reg_1919;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            hash_table_address0 <= zext_ln60_fu_1655_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hash_table_address0 <= i_cast_fu_380_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_table_address0 <= grp_hardware_encoder_fu_352_hash_table_address0;
        else 
            hash_table_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    hash_table_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_state2, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_hash_table_ce0, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
            hash_table_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_table_ce0 <= grp_hardware_encoder_fu_352_hash_table_ce0;
        else 
            hash_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_table_d0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_state2, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_hash_table_d0, ap_block_pp2_stage0, ap_CS_fsm_state13, or_ln1_fu_1688_p6)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            hash_table_d0 <= or_ln1_fu_1688_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hash_table_d0 <= ap_const_lv33_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_table_d0 <= grp_hardware_encoder_fu_352_hash_table_d0;
        else 
            hash_table_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hash_table_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_state2, valid_fu_1680_p3, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_hash_table_we0, icmp_ln269_fu_374_p2, ap_CS_fsm_state13)
    begin
        if ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (valid_fu_1680_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((icmp_ln269_fu_374_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            hash_table_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_table_we0 <= grp_hardware_encoder_fu_352_hash_table_we0;
        else 
            hash_table_we0 <= ap_const_logic_0;
        end if; 
    end process;

    hashed_1_fu_1649_p2 <= (trunc_ln4_fu_1639_p4 xor add_ln10_fu_1633_p2);
    hashed_fu_1627_p2 <= std_logic_vector(unsigned(shl_ln20_fu_1603_p2) + unsigned(xor_ln18_10_fu_1597_p2));
    i_1_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_329),64));
    i_3_fu_414_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_2_phi_fu_344_p4) + unsigned(ap_const_lv9_1));
    i_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_318),64));
    icmp_ln269_fu_374_p2 <= "1" when (i_reg_318 = ap_const_lv16_8000) else "0";
    icmp_ln278_fu_391_p2 <= "1" when (i_1_reg_329 = ap_const_lv10_200) else "0";
    icmp_ln297_fu_420_p2 <= "1" when (ap_phi_mux_i_2_phi_fu_344_p4 = ap_const_lv9_100) else "0";
    icmp_ln85_fu_1721_p2 <= "1" when (tmp_8_fu_1711_p4 = ap_const_lv26_0) else "0";
    lshr_ln18_1_fu_564_p4 <= add_ln17_1_fu_558_p2(31 downto 6);
    lshr_ln18_3_fu_814_p4 <= add_ln17_3_fu_808_p2(31 downto 6);
    lshr_ln18_4_fu_941_p4 <= add_ln17_4_fu_935_p2(31 downto 6);
    lshr_ln18_6_fu_1191_p4 <= add_ln17_6_fu_1185_p2(31 downto 6);
    lshr_ln18_7_fu_1281_p4 <= add_ln17_7_fu_1275_p2(31 downto 6);
    lshr_ln18_8_fu_1371_p4 <= add_ln17_8_fu_1365_p2(31 downto 6);
    lshr_ln18_9_fu_1489_p4 <= add_ln17_9_fu_1484_p2(31 downto 6);
    lshr_ln_fu_484_p4 <= add_ln17_fu_478_p2(21 downto 6);

    my_assoc_mem_lower_key_mem_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_state4, ap_CS_fsm_pp2_stage1, mem_lower_key_mem_addr_reg_1942, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_my_assoc_mem_lower_key_mem_address0, ap_block_pp2_stage0, ap_CS_fsm_state13, i_1_cast_fu_397_p1, ap_block_pp2_stage1, zext_ln89_fu_1732_p1)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            my_assoc_mem_lower_key_mem_address0 <= mem_lower_key_mem_addr_reg_1942;
        elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            my_assoc_mem_lower_key_mem_address0 <= zext_ln89_fu_1732_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            my_assoc_mem_lower_key_mem_address0 <= i_1_cast_fu_397_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            my_assoc_mem_lower_key_mem_address0 <= grp_hardware_encoder_fu_352_my_assoc_mem_lower_key_mem_address0;
        else 
            my_assoc_mem_lower_key_mem_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    my_assoc_mem_lower_key_mem_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_state4, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_my_assoc_mem_lower_key_mem_ce0, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            my_assoc_mem_lower_key_mem_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            my_assoc_mem_lower_key_mem_ce0 <= grp_hardware_encoder_fu_352_my_assoc_mem_lower_key_mem_ce0;
        else 
            my_assoc_mem_lower_key_mem_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    my_assoc_mem_lower_key_mem_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_my_assoc_mem_lower_key_mem_d0, ap_CS_fsm_state13, ap_block_pp2_stage1, or_ln89_fu_1781_p2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            my_assoc_mem_lower_key_mem_d0 <= or_ln89_fu_1781_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            my_assoc_mem_lower_key_mem_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            my_assoc_mem_lower_key_mem_d0 <= grp_hardware_encoder_fu_352_my_assoc_mem_lower_key_mem_d0;
        else 
            my_assoc_mem_lower_key_mem_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    my_assoc_mem_lower_key_mem_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, valid_reg_1924, icmp_ln85_reg_1933, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_my_assoc_mem_lower_key_mem_we0, icmp_ln278_fu_391_p2, ap_CS_fsm_state13)
    begin
        if ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln85_reg_1933 = ap_const_lv1_1) and (valid_reg_1924 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((icmp_ln278_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            my_assoc_mem_lower_key_mem_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            my_assoc_mem_lower_key_mem_we0 <= grp_hardware_encoder_fu_352_my_assoc_mem_lower_key_mem_we0;
        else 
            my_assoc_mem_lower_key_mem_we0 <= ap_const_logic_0;
        end if; 
    end process;


    my_assoc_mem_middle_key_mem_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_state4, ap_CS_fsm_pp2_stage1, mem_middle_key_mem_addr_reg_1937, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_my_assoc_mem_middle_key_mem_address0, ap_block_pp2_stage0, ap_CS_fsm_state13, i_1_cast_fu_397_p1, ap_block_pp2_stage1, zext_ln88_fu_1727_p1)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            my_assoc_mem_middle_key_mem_address0 <= mem_middle_key_mem_addr_reg_1937;
        elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            my_assoc_mem_middle_key_mem_address0 <= zext_ln88_fu_1727_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            my_assoc_mem_middle_key_mem_address0 <= i_1_cast_fu_397_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            my_assoc_mem_middle_key_mem_address0 <= grp_hardware_encoder_fu_352_my_assoc_mem_middle_key_mem_address0;
        else 
            my_assoc_mem_middle_key_mem_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    my_assoc_mem_middle_key_mem_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_state4, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_my_assoc_mem_middle_key_mem_ce0, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            my_assoc_mem_middle_key_mem_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            my_assoc_mem_middle_key_mem_ce0 <= grp_hardware_encoder_fu_352_my_assoc_mem_middle_key_mem_ce0;
        else 
            my_assoc_mem_middle_key_mem_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    my_assoc_mem_middle_key_mem_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_my_assoc_mem_middle_key_mem_d0, ap_CS_fsm_state13, ap_block_pp2_stage1, or_ln88_fu_1774_p2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            my_assoc_mem_middle_key_mem_d0 <= or_ln88_fu_1774_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            my_assoc_mem_middle_key_mem_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            my_assoc_mem_middle_key_mem_d0 <= grp_hardware_encoder_fu_352_my_assoc_mem_middle_key_mem_d0;
        else 
            my_assoc_mem_middle_key_mem_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    my_assoc_mem_middle_key_mem_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, valid_reg_1924, icmp_ln85_reg_1933, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_my_assoc_mem_middle_key_mem_we0, icmp_ln278_fu_391_p2, ap_CS_fsm_state13)
    begin
        if ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln85_reg_1933 = ap_const_lv1_1) and (valid_reg_1924 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((icmp_ln278_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            my_assoc_mem_middle_key_mem_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            my_assoc_mem_middle_key_mem_we0 <= grp_hardware_encoder_fu_352_my_assoc_mem_middle_key_mem_we0;
        else 
            my_assoc_mem_middle_key_mem_we0 <= ap_const_logic_0;
        end if; 
    end process;


    my_assoc_mem_upper_key_mem_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_state4, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_my_assoc_mem_upper_key_mem_address0, ap_block_pp2_stage0, ap_CS_fsm_state13, i_1_cast_fu_397_p1, ap_block_pp2_stage1)
    begin
        if ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            my_assoc_mem_upper_key_mem_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            my_assoc_mem_upper_key_mem_address0 <= i_1_cast_fu_397_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            my_assoc_mem_upper_key_mem_address0 <= grp_hardware_encoder_fu_352_my_assoc_mem_upper_key_mem_address0;
        else 
            my_assoc_mem_upper_key_mem_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    my_assoc_mem_upper_key_mem_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_state4, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_my_assoc_mem_upper_key_mem_ce0, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            my_assoc_mem_upper_key_mem_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            my_assoc_mem_upper_key_mem_ce0 <= grp_hardware_encoder_fu_352_my_assoc_mem_upper_key_mem_ce0;
        else 
            my_assoc_mem_upper_key_mem_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    my_assoc_mem_upper_key_mem_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_my_assoc_mem_upper_key_mem_d0, ap_CS_fsm_state13, ap_block_pp2_stage1, or_ln87_fu_1767_p2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            my_assoc_mem_upper_key_mem_d0 <= or_ln87_fu_1767_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            my_assoc_mem_upper_key_mem_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            my_assoc_mem_upper_key_mem_d0 <= grp_hardware_encoder_fu_352_my_assoc_mem_upper_key_mem_d0;
        else 
            my_assoc_mem_upper_key_mem_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    my_assoc_mem_upper_key_mem_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, valid_reg_1924, icmp_ln85_reg_1933, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_my_assoc_mem_upper_key_mem_we0, icmp_ln278_fu_391_p2, ap_CS_fsm_state13)
    begin
        if ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln85_reg_1933 = ap_const_lv1_1) and (valid_reg_1924 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((icmp_ln278_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            my_assoc_mem_upper_key_mem_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            my_assoc_mem_upper_key_mem_we0 <= grp_hardware_encoder_fu_352_my_assoc_mem_upper_key_mem_we0;
        else 
            my_assoc_mem_upper_key_mem_we0 <= ap_const_logic_0;
        end if; 
    end process;


    my_assoc_mem_value_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_my_assoc_mem_value_address0, ap_block_pp2_stage0, ap_CS_fsm_state13, zext_ln90_fu_1737_p1)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            my_assoc_mem_value_address0 <= zext_ln90_fu_1737_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            my_assoc_mem_value_address0 <= grp_hardware_encoder_fu_352_my_assoc_mem_value_address0;
        else 
            my_assoc_mem_value_address0 <= "XXXXXX";
        end if; 
    end process;


    my_assoc_mem_value_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_my_assoc_mem_value_ce0, ap_CS_fsm_state13)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            my_assoc_mem_value_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            my_assoc_mem_value_ce0 <= grp_hardware_encoder_fu_352_my_assoc_mem_value_ce0;
        else 
            my_assoc_mem_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    my_assoc_mem_value_d0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_my_assoc_mem_value_d0, ap_block_pp2_stage0, ap_CS_fsm_state13, zext_ln79_fu_1706_p1)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            my_assoc_mem_value_d0 <= zext_ln79_fu_1706_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            my_assoc_mem_value_d0 <= grp_hardware_encoder_fu_352_my_assoc_mem_value_d0;
        else 
            my_assoc_mem_value_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    my_assoc_mem_value_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, valid_fu_1680_p3, icmp_ln85_fu_1721_p2, ap_enable_reg_pp2_iter2, grp_hardware_encoder_fu_352_my_assoc_mem_value_we0, ap_CS_fsm_state13)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln85_fu_1721_p2 = ap_const_lv1_1) and (valid_fu_1680_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            my_assoc_mem_value_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            my_assoc_mem_value_we0 <= grp_hardware_encoder_fu_352_my_assoc_mem_value_we0;
        else 
            my_assoc_mem_value_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1_fu_1688_p6 <= ((((ap_const_lv5_10 & value_fu_1660_p1) & ap_const_lv4_0) & value_fu_1660_p1) & ap_const_lv8_0);
    or_ln87_fu_1767_p2 <= (sext_ln87_fu_1763_p1 or my_assoc_mem_upper_key_mem_q0);
    or_ln88_fu_1774_p2 <= (sext_ln87_fu_1763_p1 or my_assoc_mem_middle_key_mem_q0);
    or_ln89_fu_1781_p2 <= (sext_ln87_fu_1763_p1 or my_assoc_mem_lower_key_mem_q0);
    or_ln_fu_430_p6 <= ((((trunc_ln301_1_fu_426_p1 & ap_const_lv5_0) & trunc_ln301_1_fu_426_p1) & ap_const_lv3_0) & trunc_ln301_1_fu_426_p1);
        sext_ln87_fu_1763_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln87_fu_1758_p2),64));

    shl_ln17_1_fu_534_p3 <= (trunc_ln17_fu_530_p1 & ap_const_lv10_0);
    shl_ln17_2_fu_780_p2 <= std_logic_vector(shift_left(unsigned(add_ln16_3_fu_774_p2),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    shl_ln17_3_fu_901_p2 <= std_logic_vector(shift_left(unsigned(add_ln16_4_fu_895_p2),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    shl_ln17_4_fu_1029_p2 <= std_logic_vector(shift_left(unsigned(add_ln16_5_fu_1023_p2),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    shl_ln17_5_fu_1153_p2 <= std_logic_vector(shift_left(unsigned(add_ln16_6_fu_1147_p2),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    shl_ln17_6_fu_1235_p2 <= std_logic_vector(shift_left(unsigned(xor_ln18_6_fu_1229_p2),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    shl_ln17_7_fu_1325_p2 <= std_logic_vector(shift_left(unsigned(xor_ln18_7_fu_1319_p2),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    shl_ln17_8_fu_1479_p2 <= std_logic_vector(shift_left(unsigned(xor_ln18_8_reg_1903),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    shl_ln17_9_fu_1509_p2 <= std_logic_vector(shift_left(unsigned(xor_ln18_9_fu_1503_p2),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    shl_ln17_fu_650_p2 <= std_logic_vector(shift_left(unsigned(add_ln16_2_fu_644_p2),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    shl_ln20_fu_1603_p2 <= std_logic_vector(shift_left(unsigned(xor_ln18_10_fu_1597_p2),to_integer(unsigned('0' & ap_const_lv26_3(26-1 downto 0)))));
    shl_ln301_fu_1664_p2 <= std_logic_vector(shift_left(unsigned(i_2_reg_340_pp2_iter1_reg),to_integer(unsigned('0' & ap_const_lv9_8(9-1 downto 0)))));
    shl_ln87_fu_1758_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & p_load_reg_1928(31-1 downto 0)))));
    shl_ln_fu_470_p3 <= (add_ln16_fu_460_p2 & ap_const_lv10_0);
    tmp_1_fu_508_p3 <= ap_phi_mux_i_2_phi_fu_344_p4(2 downto 2);
    tmp_2_fu_606_p3 <= ap_phi_mux_i_2_phi_fu_344_p4(3 downto 3);
    tmp_3_fu_754_p3 <= i_2_reg_340(4 downto 4);
    tmp_4_fu_857_p3 <= i_2_reg_340(5 downto 5);
    tmp_5_fu_985_p3 <= i_2_reg_340(6 downto 6);
    tmp_6_fu_1127_p3 <= i_2_reg_340(7 downto 7);
    tmp_8_fu_1711_p4 <= empty_48_fu_194(31 downto 6);
    tmp_fu_448_p3 <= ap_phi_mux_i_2_phi_fu_344_p4(1 downto 1);
    trunc_ln16_4_fu_624_p4 <= add_ln17_1_fu_558_p2(20 downto 6);
    trunc_ln16_6_fu_730_p4 <= add_ln17_2_fu_684_p2(20 downto 6);
    trunc_ln16_8_fu_875_p4 <= add_ln17_3_fu_808_p2(20 downto 6);
    trunc_ln16_s_fu_1003_p4 <= add_ln17_4_fu_935_p2(20 downto 6);
    trunc_ln17_10_fu_1441_p3 <= (trunc_ln17_21_fu_1437_p1 & ap_const_lv10_0);
    trunc_ln17_11_fu_1515_p4 <= add_ln17_9_fu_1484_p2(20 downto 6);
    trunc_ln17_12_fu_1534_p3 <= (trunc_ln17_22_fu_1530_p1 & ap_const_lv10_0);
    trunc_ln17_13_fu_546_p1 <= add_ln16_1_fu_520_p2(16 - 1 downto 0);
    trunc_ln17_14_fu_672_p1 <= add_ln16_2_fu_644_p2(16 - 1 downto 0);
    trunc_ln17_15_fu_796_p1 <= add_ln16_3_fu_774_p2(16 - 1 downto 0);
    trunc_ln17_16_fu_923_p1 <= add_ln16_4_fu_895_p2(16 - 1 downto 0);
    trunc_ln17_17_fu_1051_p1 <= add_ln16_5_fu_1023_p2(16 - 1 downto 0);
    trunc_ln17_18_fu_1173_p1 <= add_ln16_6_fu_1147_p2(16 - 1 downto 0);
    trunc_ln17_19_fu_1263_p1 <= xor_ln18_6_fu_1229_p2(16 - 1 downto 0);
    trunc_ln17_1_fu_676_p3 <= (trunc_ln17_14_fu_672_p1 & ap_const_lv10_0);
    trunc_ln17_20_fu_1353_p1 <= xor_ln18_7_fu_1319_p2(16 - 1 downto 0);
    trunc_ln17_21_fu_1437_p1 <= xor_ln18_8_fu_1409_p2(16 - 1 downto 0);
    trunc_ln17_22_fu_1530_p1 <= xor_ln18_9_fu_1503_p2(16 - 1 downto 0);
    trunc_ln17_2_fu_800_p3 <= (trunc_ln17_15_fu_796_p1 & ap_const_lv10_0);
    trunc_ln17_3_fu_927_p3 <= (trunc_ln17_16_fu_923_p1 & ap_const_lv10_0);
    trunc_ln17_4_fu_1055_p3 <= (trunc_ln17_17_fu_1051_p1 & ap_const_lv10_0);
    trunc_ln17_5_fu_1177_p3 <= (trunc_ln17_18_fu_1173_p1 & ap_const_lv10_0);
    trunc_ln17_6_fu_1247_p4 <= add_ln17_6_fu_1185_p2(20 downto 6);
    trunc_ln17_7_fu_1267_p3 <= (trunc_ln17_19_fu_1263_p1 & ap_const_lv10_0);
    trunc_ln17_8_fu_1337_p4 <= add_ln17_7_fu_1275_p2(20 downto 6);
    trunc_ln17_9_fu_1357_p3 <= (trunc_ln17_20_fu_1353_p1 & ap_const_lv10_0);
    trunc_ln17_fu_530_p1 <= add_ln16_1_fu_520_p2(22 - 1 downto 0);
    trunc_ln17_s_fu_1421_p4 <= add_ln17_8_fu_1365_p2(20 downto 6);
    trunc_ln18_10_fu_1305_p3 <= (trunc_ln18_15_fu_1301_p1 & ap_const_lv10_0);
    trunc_ln18_11_fu_1085_p1 <= add_ln16_5_fu_1023_p2(5 - 1 downto 0);
    trunc_ln18_12_fu_1395_p3 <= (trunc_ln18_17_fu_1391_p1 & ap_const_lv10_0);
    trunc_ln18_13_fu_1211_p1 <= add_ln16_6_fu_1147_p2(5 - 1 downto 0);
    trunc_ln18_14_fu_1459_p3 <= (trunc_ln18_21_fu_1455_p1 & ap_const_lv10_0);
    trunc_ln18_15_fu_1301_p1 <= xor_ln18_6_fu_1229_p2(5 - 1 downto 0);
    trunc_ln18_16_fu_1557_p3 <= (trunc_ln18_22_fu_1553_p1 & ap_const_lv10_0);
    trunc_ln18_17_fu_1391_p1 <= xor_ln18_7_fu_1319_p2(5 - 1 downto 0);
    trunc_ln18_18_fu_1571_p4 <= add_ln17_10_fu_1542_p2(31 downto 6);
    trunc_ln18_19_fu_1587_p4 <= add_ln17_10_fu_1542_p2(20 downto 6);
    trunc_ln18_1_fu_586_p3 <= (trunc_ln18_2_fu_582_p1 & ap_const_lv10_0);
    trunc_ln18_21_fu_1455_p1 <= xor_ln18_8_fu_1409_p2(5 - 1 downto 0);
    trunc_ln18_22_fu_1553_p1 <= xor_ln18_9_fu_1503_p2(5 - 1 downto 0);
    trunc_ln18_2_fu_582_p1 <= add_ln16_1_fu_520_p2(5 - 1 downto 0);
    trunc_ln18_3_fu_710_p3 <= (trunc_ln18_4_fu_706_p1 & ap_const_lv10_0);
    trunc_ln18_4_fu_706_p1 <= add_ln16_2_fu_644_p2(5 - 1 downto 0);
    trunc_ln18_5_fu_837_p3 <= (trunc_ln18_6_fu_833_p1 & ap_const_lv10_0);
    trunc_ln18_6_fu_833_p1 <= add_ln16_3_fu_774_p2(5 - 1 downto 0);
    trunc_ln18_7_fu_965_p3 <= (trunc_ln18_8_fu_961_p1 & ap_const_lv10_0);
    trunc_ln18_8_fu_961_p1 <= add_ln16_4_fu_895_p2(5 - 1 downto 0);
    trunc_ln18_9_fu_1089_p3 <= (trunc_ln18_11_fu_1085_p1 & ap_const_lv10_0);
    trunc_ln18_fu_578_p1 <= add_ln16_1_fu_520_p2(15 - 1 downto 0);
    trunc_ln18_s_fu_1215_p3 <= (trunc_ln18_13_fu_1211_p1 & ap_const_lv10_0);
    trunc_ln1_fu_550_p3 <= (trunc_ln17_13_fu_546_p1 & ap_const_lv10_0);
    trunc_ln20_fu_1615_p1 <= xor_ln18_10_fu_1597_p2(12 - 1 downto 0);
    trunc_ln301_1_fu_426_p1 <= ap_phi_mux_i_2_phi_fu_344_p4(1 - 1 downto 0);
    trunc_ln3_fu_1619_p3 <= (trunc_ln20_fu_1615_p1 & ap_const_lv3_0);
    trunc_ln4_fu_1639_p4 <= hashed_fu_1627_p2(25 downto 11);
    trunc_ln_fu_1670_p4 <= i_2_reg_340_pp2_iter1_reg(7 downto 1);
    valid_fu_1680_p3 <= hash_table_q0(32 downto 32);
    value_fu_1660_p1 <= i_2_reg_340_pp2_iter1_reg(8 - 1 downto 0);
    xor_ln16_1_fu_766_p2 <= (lshr_ln18_2_reg_1861 xor add_ln18_2_reg_1867);
    xor_ln16_2_fu_885_p2 <= (lshr_ln18_3_fu_814_p4 xor add_ln18_4_fu_845_p2);
    xor_ln16_3_fu_1013_p2 <= (lshr_ln18_4_fu_941_p4 xor add_ln18_6_fu_973_p2);
    xor_ln16_4_fu_1139_p2 <= (lshr_ln18_5_reg_1882 xor add_ln18_8_reg_1888);
    xor_ln16_fu_634_p2 <= (lshr_ln18_1_fu_564_p4 xor add_ln18_fu_594_p2);
    xor_ln17_1_fu_740_p2 <= (trunc_ln16_6_fu_730_p4 xor add_ln16_8_fu_724_p2);
    xor_ln17_2_fu_907_p2 <= (trunc_ln16_8_fu_875_p4 xor add_ln16_9_fu_869_p2);
    xor_ln17_3_fu_1035_p2 <= (trunc_ln16_s_fu_1003_p4 xor add_ln16_10_fu_997_p2);
    xor_ln17_4_fu_1159_p2 <= (trunc_ln16_1_reg_1898 xor add_ln16_11_reg_1893);
    xor_ln17_5_fu_1257_p2 <= (lshr_ln18_6_fu_1191_p4 xor add_ln18_10_fu_1223_p2);
    xor_ln17_6_fu_1347_p2 <= (lshr_ln18_7_fu_1281_p4 xor add_ln18_11_fu_1313_p2);
    xor_ln17_7_fu_1431_p2 <= (lshr_ln18_8_fu_1371_p4 xor add_ln18_12_fu_1403_p2);
    xor_ln17_8_fu_1525_p2 <= (lshr_ln18_9_fu_1489_p4 xor add_ln18_13_reg_1909);
    xor_ln17_fu_656_p2 <= (trunc_ln16_4_fu_624_p4 xor add_ln16_7_fu_618_p2);
    xor_ln18_10_fu_1597_p2 <= (trunc_ln18_18_fu_1571_p4 xor add_ln18_14_fu_1565_p2);
    xor_ln18_11_fu_1295_p2 <= (trunc_ln17_6_fu_1247_p4 xor add_ln17_16_fu_1241_p2);
    xor_ln18_12_fu_1385_p2 <= (trunc_ln17_8_fu_1337_p4 xor add_ln17_17_fu_1331_p2);
    xor_ln18_13_fu_1449_p2 <= (trunc_ln17_s_fu_1421_p4 xor add_ln17_18_fu_1415_p2);
    xor_ln18_14_fu_1548_p2 <= (trunc_ln17_11_fu_1515_p4 xor add_ln17_19_reg_1914);
    xor_ln18_1_fu_600_p2 <= (zext_ln18_1_fu_574_p1 xor add_ln17_1_fu_558_p2);
    xor_ln18_2_fu_749_p2 <= (zext_ln18_2_fu_746_p1 xor add_ln17_2_reg_1856);
    xor_ln18_3_fu_851_p2 <= (zext_ln18_3_fu_824_p1 xor add_ln17_3_fu_808_p2);
    xor_ln18_4_fu_979_p2 <= (zext_ln18_4_fu_951_p1 xor add_ln17_4_fu_935_p2);
    xor_ln18_5_fu_1122_p2 <= (zext_ln18_5_fu_1119_p1 xor add_ln17_5_reg_1877);
    xor_ln18_6_fu_1229_p2 <= (zext_ln18_6_fu_1201_p1 xor add_ln17_6_fu_1185_p2);
    xor_ln18_7_fu_1319_p2 <= (zext_ln18_7_fu_1291_p1 xor add_ln17_7_fu_1275_p2);
    xor_ln18_8_fu_1409_p2 <= (zext_ln18_8_fu_1381_p1 xor add_ln17_8_fu_1365_p2);
    xor_ln18_9_fu_1503_p2 <= (zext_ln18_9_fu_1499_p1 xor add_ln17_9_fu_1484_p2);
    xor_ln18_fu_498_p2 <= (zext_ln18_fu_494_p1 xor add_ln17_fu_478_p2);
    xor_ln20_fu_1609_p2 <= (trunc_ln18_19_fu_1587_p4 xor add_ln18_15_fu_1581_p2);
    zext_ln16_10_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_985_p3),32));
    zext_ln16_11_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_985_p3),26));
    zext_ln16_12_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_1127_p3),32));
    zext_ln16_13_fu_1143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_1127_p3),26));
    zext_ln16_1_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_448_p3),12));
    zext_ln16_2_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln18_fu_498_p2),23));
    zext_ln16_3_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_508_p3),23));
    zext_ln16_4_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_606_p3),32));
    zext_ln16_5_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_606_p3),26));
    zext_ln16_6_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_754_p3),32));
    zext_ln16_7_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_754_p3),26));
    zext_ln16_8_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_857_p3),32));
    zext_ln16_9_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_857_p3),26));
    zext_ln16_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_430_p6),12));
    zext_ln17_1_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_1_fu_520_p2),32));
    zext_ln17_2_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_1_fu_520_p2),26));
    zext_ln17_3_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_606_p3),15));
    zext_ln17_4_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_754_p3),15));
    zext_ln17_5_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_857_p3),15));
    zext_ln17_6_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_985_p3),15));
    zext_ln17_7_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_1127_p3),15));
    zext_ln17_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_fu_460_p2),22));
    zext_ln18_1_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln18_1_fu_564_p4),32));
    zext_ln18_2_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln18_2_reg_1861),32));
    zext_ln18_3_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln18_3_fu_814_p4),32));
    zext_ln18_4_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln18_4_fu_941_p4),32));
    zext_ln18_5_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln18_5_reg_1882),32));
    zext_ln18_6_fu_1201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln18_6_fu_1191_p4),32));
    zext_ln18_7_fu_1291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln18_7_fu_1281_p4),32));
    zext_ln18_8_fu_1381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln18_8_fu_1371_p4),32));
    zext_ln18_9_fu_1499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln18_9_fu_1489_p4),32));
    zext_ln18_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_484_p4),22));
    zext_ln60_fu_1655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hashed_1_fu_1649_p2),64));
    zext_ln79_fu_1706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(value_fu_1660_p1),12));
    zext_ln88_fu_1727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_1670_p4),64));
    zext_ln89_fu_1732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln301_fu_1664_p2),64));
    zext_ln90_fu_1737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_48_fu_194),64));
end behav;
