// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module lzw_stream_hardware_encoder (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s1,
        length_r,
        file_buffer,
        total_bytes,
        hash_table_address0,
        hash_table_ce0,
        hash_table_we0,
        hash_table_d0,
        hash_table_q0,
        my_assoc_mem_upper_key_mem_address0,
        my_assoc_mem_upper_key_mem_ce0,
        my_assoc_mem_upper_key_mem_we0,
        my_assoc_mem_upper_key_mem_d0,
        my_assoc_mem_upper_key_mem_q0,
        my_assoc_mem_middle_key_mem_address0,
        my_assoc_mem_middle_key_mem_ce0,
        my_assoc_mem_middle_key_mem_we0,
        my_assoc_mem_middle_key_mem_d0,
        my_assoc_mem_middle_key_mem_q0,
        my_assoc_mem_lower_key_mem_address0,
        my_assoc_mem_lower_key_mem_ce0,
        my_assoc_mem_lower_key_mem_we0,
        my_assoc_mem_lower_key_mem_d0,
        my_assoc_mem_lower_key_mem_q0,
        my_assoc_mem_value_address0,
        my_assoc_mem_value_ce0,
        my_assoc_mem_value_we0,
        my_assoc_mem_value_d0,
        my_assoc_mem_value_q0,
        my_assoc_mem_fill_read
);

parameter    ap_ST_fsm_state1 = 239'd1;
parameter    ap_ST_fsm_pp0_stage0 = 239'd2;
parameter    ap_ST_fsm_state75 = 239'd4;
parameter    ap_ST_fsm_state76 = 239'd8;
parameter    ap_ST_fsm_state77 = 239'd16;
parameter    ap_ST_fsm_state78 = 239'd32;
parameter    ap_ST_fsm_state79 = 239'd64;
parameter    ap_ST_fsm_state80 = 239'd128;
parameter    ap_ST_fsm_state81 = 239'd256;
parameter    ap_ST_fsm_state82 = 239'd512;
parameter    ap_ST_fsm_state83 = 239'd1024;
parameter    ap_ST_fsm_state84 = 239'd2048;
parameter    ap_ST_fsm_state85 = 239'd4096;
parameter    ap_ST_fsm_state86 = 239'd8192;
parameter    ap_ST_fsm_state87 = 239'd16384;
parameter    ap_ST_fsm_state88 = 239'd32768;
parameter    ap_ST_fsm_state89 = 239'd65536;
parameter    ap_ST_fsm_state90 = 239'd131072;
parameter    ap_ST_fsm_state91 = 239'd262144;
parameter    ap_ST_fsm_state92 = 239'd524288;
parameter    ap_ST_fsm_state93 = 239'd1048576;
parameter    ap_ST_fsm_state94 = 239'd2097152;
parameter    ap_ST_fsm_state95 = 239'd4194304;
parameter    ap_ST_fsm_state96 = 239'd8388608;
parameter    ap_ST_fsm_state97 = 239'd16777216;
parameter    ap_ST_fsm_state98 = 239'd33554432;
parameter    ap_ST_fsm_state99 = 239'd67108864;
parameter    ap_ST_fsm_state100 = 239'd134217728;
parameter    ap_ST_fsm_state101 = 239'd268435456;
parameter    ap_ST_fsm_state102 = 239'd536870912;
parameter    ap_ST_fsm_state103 = 239'd1073741824;
parameter    ap_ST_fsm_state104 = 239'd2147483648;
parameter    ap_ST_fsm_state105 = 239'd4294967296;
parameter    ap_ST_fsm_state106 = 239'd8589934592;
parameter    ap_ST_fsm_state107 = 239'd17179869184;
parameter    ap_ST_fsm_state108 = 239'd34359738368;
parameter    ap_ST_fsm_state109 = 239'd68719476736;
parameter    ap_ST_fsm_state110 = 239'd137438953472;
parameter    ap_ST_fsm_state111 = 239'd274877906944;
parameter    ap_ST_fsm_state112 = 239'd549755813888;
parameter    ap_ST_fsm_state113 = 239'd1099511627776;
parameter    ap_ST_fsm_state114 = 239'd2199023255552;
parameter    ap_ST_fsm_state115 = 239'd4398046511104;
parameter    ap_ST_fsm_state116 = 239'd8796093022208;
parameter    ap_ST_fsm_state117 = 239'd17592186044416;
parameter    ap_ST_fsm_state118 = 239'd35184372088832;
parameter    ap_ST_fsm_state119 = 239'd70368744177664;
parameter    ap_ST_fsm_state120 = 239'd140737488355328;
parameter    ap_ST_fsm_state121 = 239'd281474976710656;
parameter    ap_ST_fsm_state122 = 239'd562949953421312;
parameter    ap_ST_fsm_state123 = 239'd1125899906842624;
parameter    ap_ST_fsm_state124 = 239'd2251799813685248;
parameter    ap_ST_fsm_state125 = 239'd4503599627370496;
parameter    ap_ST_fsm_state126 = 239'd9007199254740992;
parameter    ap_ST_fsm_state127 = 239'd18014398509481984;
parameter    ap_ST_fsm_state128 = 239'd36028797018963968;
parameter    ap_ST_fsm_state129 = 239'd72057594037927936;
parameter    ap_ST_fsm_state130 = 239'd144115188075855872;
parameter    ap_ST_fsm_state131 = 239'd288230376151711744;
parameter    ap_ST_fsm_state132 = 239'd576460752303423488;
parameter    ap_ST_fsm_state133 = 239'd1152921504606846976;
parameter    ap_ST_fsm_state134 = 239'd2305843009213693952;
parameter    ap_ST_fsm_state135 = 239'd4611686018427387904;
parameter    ap_ST_fsm_state136 = 239'd9223372036854775808;
parameter    ap_ST_fsm_state137 = 239'd18446744073709551616;
parameter    ap_ST_fsm_state138 = 239'd36893488147419103232;
parameter    ap_ST_fsm_state139 = 239'd73786976294838206464;
parameter    ap_ST_fsm_state140 = 239'd147573952589676412928;
parameter    ap_ST_fsm_state141 = 239'd295147905179352825856;
parameter    ap_ST_fsm_state142 = 239'd590295810358705651712;
parameter    ap_ST_fsm_state143 = 239'd1180591620717411303424;
parameter    ap_ST_fsm_state144 = 239'd2361183241434822606848;
parameter    ap_ST_fsm_state145 = 239'd4722366482869645213696;
parameter    ap_ST_fsm_state146 = 239'd9444732965739290427392;
parameter    ap_ST_fsm_state147 = 239'd18889465931478580854784;
parameter    ap_ST_fsm_state148 = 239'd37778931862957161709568;
parameter    ap_ST_fsm_state149 = 239'd75557863725914323419136;
parameter    ap_ST_fsm_state150 = 239'd151115727451828646838272;
parameter    ap_ST_fsm_state151 = 239'd302231454903657293676544;
parameter    ap_ST_fsm_state152 = 239'd604462909807314587353088;
parameter    ap_ST_fsm_state153 = 239'd1208925819614629174706176;
parameter    ap_ST_fsm_state154 = 239'd2417851639229258349412352;
parameter    ap_ST_fsm_state155 = 239'd4835703278458516698824704;
parameter    ap_ST_fsm_state156 = 239'd9671406556917033397649408;
parameter    ap_ST_fsm_state157 = 239'd19342813113834066795298816;
parameter    ap_ST_fsm_state158 = 239'd38685626227668133590597632;
parameter    ap_ST_fsm_state159 = 239'd77371252455336267181195264;
parameter    ap_ST_fsm_state160 = 239'd154742504910672534362390528;
parameter    ap_ST_fsm_state161 = 239'd309485009821345068724781056;
parameter    ap_ST_fsm_state162 = 239'd618970019642690137449562112;
parameter    ap_ST_fsm_state163 = 239'd1237940039285380274899124224;
parameter    ap_ST_fsm_state164 = 239'd2475880078570760549798248448;
parameter    ap_ST_fsm_state165 = 239'd4951760157141521099596496896;
parameter    ap_ST_fsm_state166 = 239'd9903520314283042199192993792;
parameter    ap_ST_fsm_state167 = 239'd19807040628566084398385987584;
parameter    ap_ST_fsm_state168 = 239'd39614081257132168796771975168;
parameter    ap_ST_fsm_state169 = 239'd79228162514264337593543950336;
parameter    ap_ST_fsm_state170 = 239'd158456325028528675187087900672;
parameter    ap_ST_fsm_state171 = 239'd316912650057057350374175801344;
parameter    ap_ST_fsm_state172 = 239'd633825300114114700748351602688;
parameter    ap_ST_fsm_state173 = 239'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state174 = 239'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state175 = 239'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state176 = 239'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state177 = 239'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state178 = 239'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state179 = 239'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state180 = 239'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state181 = 239'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state182 = 239'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state183 = 239'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state184 = 239'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state185 = 239'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state186 = 239'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state187 = 239'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state188 = 239'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state189 = 239'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state190 = 239'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state191 = 239'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state192 = 239'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state193 = 239'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state194 = 239'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state195 = 239'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state196 = 239'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state197 = 239'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state198 = 239'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state199 = 239'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state200 = 239'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state201 = 239'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state202 = 239'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state203 = 239'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state204 = 239'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state205 = 239'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state206 = 239'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state207 = 239'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state208 = 239'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state209 = 239'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state210 = 239'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state211 = 239'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state212 = 239'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state213 = 239'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state214 = 239'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state215 = 239'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state216 = 239'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state217 = 239'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state218 = 239'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state219 = 239'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state220 = 239'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state221 = 239'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state222 = 239'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state223 = 239'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state224 = 239'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state225 = 239'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state226 = 239'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state227 = 239'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state228 = 239'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state229 = 239'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state230 = 239'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state231 = 239'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state232 = 239'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state233 = 239'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state234 = 239'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state235 = 239'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state236 = 239'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_pp2_stage0 = 239'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_pp2_stage1 = 239'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_pp2_stage2 = 239'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state310 = 239'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state311 = 239'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state312 = 239'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state313 = 239'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state314 = 239'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state315 = 239'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state316 = 239'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state317 = 239'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state318 = 239'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state319 = 239'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state320 = 239'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state321 = 239'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state322 = 239'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state323 = 239'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state324 = 239'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state325 = 239'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state326 = 239'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state327 = 239'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state328 = 239'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state329 = 239'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state330 = 239'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state331 = 239'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state332 = 239'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state333 = 239'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state334 = 239'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state335 = 239'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state336 = 239'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state337 = 239'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state338 = 239'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state339 = 239'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state340 = 239'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state341 = 239'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state342 = 239'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state343 = 239'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state344 = 239'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state345 = 239'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state346 = 239'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state347 = 239'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state348 = 239'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state349 = 239'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state350 = 239'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state351 = 239'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state352 = 239'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state353 = 239'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state354 = 239'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state355 = 239'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state356 = 239'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state357 = 239'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state358 = 239'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state359 = 239'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state360 = 239'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state361 = 239'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_state362 = 239'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state363 = 239'd1684996666696914987166688442938726917102321526408785780068975640576;
parameter    ap_ST_fsm_state364 = 239'd3369993333393829974333376885877453834204643052817571560137951281152;
parameter    ap_ST_fsm_state365 = 239'd6739986666787659948666753771754907668409286105635143120275902562304;
parameter    ap_ST_fsm_state366 = 239'd13479973333575319897333507543509815336818572211270286240551805124608;
parameter    ap_ST_fsm_state367 = 239'd26959946667150639794667015087019630673637144422540572481103610249216;
parameter    ap_ST_fsm_state368 = 239'd53919893334301279589334030174039261347274288845081144962207220498432;
parameter    ap_ST_fsm_state369 = 239'd107839786668602559178668060348078522694548577690162289924414440996864;
parameter    ap_ST_fsm_state370 = 239'd215679573337205118357336120696157045389097155380324579848828881993728;
parameter    ap_ST_fsm_state371 = 239'd431359146674410236714672241392314090778194310760649159697657763987456;
parameter    ap_ST_fsm_state372 = 239'd862718293348820473429344482784628181556388621521298319395315527974912;
parameter    ap_ST_fsm_state373 = 239'd1725436586697640946858688965569256363112777243042596638790631055949824;
parameter    ap_ST_fsm_state374 = 239'd3450873173395281893717377931138512726225554486085193277581262111899648;
parameter    ap_ST_fsm_state375 = 239'd6901746346790563787434755862277025452451108972170386555162524223799296;
parameter    ap_ST_fsm_state376 = 239'd13803492693581127574869511724554050904902217944340773110325048447598592;
parameter    ap_ST_fsm_state377 = 239'd27606985387162255149739023449108101809804435888681546220650096895197184;
parameter    ap_ST_fsm_state378 = 239'd55213970774324510299478046898216203619608871777363092441300193790394368;
parameter    ap_ST_fsm_state379 = 239'd110427941548649020598956093796432407239217743554726184882600387580788736;
parameter    ap_ST_fsm_state380 = 239'd220855883097298041197912187592864814478435487109452369765200775161577472;
parameter    ap_ST_fsm_state381 = 239'd441711766194596082395824375185729628956870974218904739530401550323154944;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] s1;
input  [31:0] length_r;
input  [63:0] file_buffer;
input  [63:0] total_bytes;
output  [14:0] hash_table_address0;
output   hash_table_ce0;
output   hash_table_we0;
output  [32:0] hash_table_d0;
input  [32:0] hash_table_q0;
output  [8:0] my_assoc_mem_upper_key_mem_address0;
output   my_assoc_mem_upper_key_mem_ce0;
output   my_assoc_mem_upper_key_mem_we0;
output  [63:0] my_assoc_mem_upper_key_mem_d0;
input  [63:0] my_assoc_mem_upper_key_mem_q0;
output  [8:0] my_assoc_mem_middle_key_mem_address0;
output   my_assoc_mem_middle_key_mem_ce0;
output   my_assoc_mem_middle_key_mem_we0;
output  [63:0] my_assoc_mem_middle_key_mem_d0;
input  [63:0] my_assoc_mem_middle_key_mem_q0;
output  [8:0] my_assoc_mem_lower_key_mem_address0;
output   my_assoc_mem_lower_key_mem_ce0;
output   my_assoc_mem_lower_key_mem_we0;
output  [63:0] my_assoc_mem_lower_key_mem_d0;
input  [63:0] my_assoc_mem_lower_key_mem_q0;
output  [5:0] my_assoc_mem_value_address0;
output   my_assoc_mem_value_ce0;
output   my_assoc_mem_value_we0;
output  [11:0] my_assoc_mem_value_d0;
input  [11:0] my_assoc_mem_value_q0;
input  [31:0] my_assoc_mem_fill_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg[63:0] m_axi_gmem_AWADDR;
reg m_axi_gmem_WVALID;
reg[31:0] m_axi_gmem_WDATA;
reg[3:0] m_axi_gmem_WSTRB;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [238:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln157_reg_1407;
reg    gmem_blk_n_R;
reg    ap_enable_reg_pp0_iter71;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter70_reg;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state75;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state97;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state165;
wire    ap_CS_fsm_state167;
wire    ap_CS_fsm_state168;
wire    ap_CS_fsm_state236;
wire    ap_CS_fsm_pp2_stage1;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp2_stage1;
reg   [0:0] icmp_ln209_reg_1528;
wire    ap_CS_fsm_pp2_stage2;
wire    ap_block_pp2_stage2;
reg    ap_enable_reg_pp2_iter23;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter23_reg;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter1_reg;
reg    ap_enable_reg_pp2_iter24;
wire    ap_CS_fsm_state311;
wire    ap_CS_fsm_state312;
wire    ap_CS_fsm_state380;
wire    ap_CS_fsm_state313;
wire    ap_CS_fsm_state381;
reg   [0:0] icmp_ln218_reg_1617;
reg   [31:0] i_reg_371;
reg   [63:0] j_reg_406;
reg   [31:0] i_5_reg_418;
wire   [1:0] trunc_ln174_fu_482_p1;
reg   [1:0] trunc_ln174_reg_1397;
wire   [31:0] add_ln157_fu_486_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
wire    ap_block_state29_pp0_stage0_iter27;
wire    ap_block_state30_pp0_stage0_iter28;
wire    ap_block_state31_pp0_stage0_iter29;
wire    ap_block_state32_pp0_stage0_iter30;
wire    ap_block_state33_pp0_stage0_iter31;
wire    ap_block_state34_pp0_stage0_iter32;
wire    ap_block_state35_pp0_stage0_iter33;
wire    ap_block_state36_pp0_stage0_iter34;
wire    ap_block_state37_pp0_stage0_iter35;
wire    ap_block_state38_pp0_stage0_iter36;
wire    ap_block_state39_pp0_stage0_iter37;
wire    ap_block_state40_pp0_stage0_iter38;
wire    ap_block_state41_pp0_stage0_iter39;
wire    ap_block_state42_pp0_stage0_iter40;
wire    ap_block_state43_pp0_stage0_iter41;
wire    ap_block_state44_pp0_stage0_iter42;
wire    ap_block_state45_pp0_stage0_iter43;
wire    ap_block_state46_pp0_stage0_iter44;
wire    ap_block_state47_pp0_stage0_iter45;
wire    ap_block_state48_pp0_stage0_iter46;
wire    ap_block_state49_pp0_stage0_iter47;
wire    ap_block_state50_pp0_stage0_iter48;
wire    ap_block_state51_pp0_stage0_iter49;
wire    ap_block_state52_pp0_stage0_iter50;
wire    ap_block_state53_pp0_stage0_iter51;
wire    ap_block_state54_pp0_stage0_iter52;
wire    ap_block_state55_pp0_stage0_iter53;
wire    ap_block_state56_pp0_stage0_iter54;
wire    ap_block_state57_pp0_stage0_iter55;
wire    ap_block_state58_pp0_stage0_iter56;
wire    ap_block_state59_pp0_stage0_iter57;
wire    ap_block_state60_pp0_stage0_iter58;
wire    ap_block_state61_pp0_stage0_iter59;
wire    ap_block_state62_pp0_stage0_iter60;
wire    ap_block_state63_pp0_stage0_iter61;
wire    ap_block_state64_pp0_stage0_iter62;
wire    ap_block_state65_pp0_stage0_iter63;
wire    ap_block_state66_pp0_stage0_iter64;
wire    ap_block_state67_pp0_stage0_iter65;
wire    ap_block_state68_pp0_stage0_iter66;
wire    ap_block_state69_pp0_stage0_iter67;
wire    ap_block_state70_pp0_stage0_iter68;
wire    ap_block_state71_pp0_stage0_iter69;
wire    ap_block_state72_pp0_stage0_iter70;
reg    ap_block_state73_pp0_stage0_iter71;
wire   [7:0] chr_stream_din;
wire    chr_stream_full_n;
reg    chr_stream_write;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter71_reg;
reg    ap_block_state74_pp0_stage0_iter72;
reg    ap_enable_reg_pp0_iter72;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln157_fu_492_p2;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter1_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter2_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter3_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter4_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter5_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter6_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter7_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter8_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter9_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter10_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter11_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter12_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter13_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter14_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter15_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter16_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter17_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter18_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter19_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter20_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter21_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter22_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter23_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter24_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter25_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter26_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter27_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter28_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter29_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter30_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter31_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter32_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter33_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter34_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter35_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter36_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter37_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter38_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter39_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter40_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter41_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter42_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter43_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter44_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter45_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter46_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter47_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter48_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter49_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter50_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter51_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter52_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter53_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter54_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter55_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter56_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter57_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter58_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter59_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter60_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter61_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter62_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter63_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter64_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter65_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter66_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter67_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter68_reg;
reg   [0:0] icmp_ln157_reg_1407_pp0_iter69_reg;
reg   [63:0] gmem_addr_reg_1411;
wire   [1:0] add_ln174_1_fu_530_p2;
reg   [1:0] add_ln174_1_reg_1417;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter1_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter2_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter3_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter4_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter5_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter6_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter7_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter8_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter9_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter10_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter11_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter12_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter13_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter14_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter15_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter16_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter17_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter18_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter19_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter20_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter21_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter22_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter23_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter24_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter25_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter26_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter27_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter28_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter29_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter30_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter31_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter32_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter33_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter34_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter35_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter36_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter37_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter38_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter39_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter40_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter41_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter42_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter43_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter44_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter45_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter46_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter47_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter48_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter49_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter50_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter51_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter52_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter53_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter54_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter55_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter56_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter57_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter58_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter59_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter60_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter61_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter62_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter63_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter64_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter65_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter66_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter67_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter68_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter69_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter70_reg;
reg   [1:0] add_ln174_1_reg_1417_pp0_iter71_reg;
reg   [31:0] gmem_addr_read_reg_1422;
reg   [31:0] tmp_14_reg_1433;
wire    ap_CS_fsm_state77;
wire   [31:0] total_bits_fu_588_p2;
reg   [31:0] total_bits_reg_1441;
wire   [63:0] grp_fu_469_p1;
reg   [63:0] conv_i_reg_1446;
wire    ap_CS_fsm_state81;
wire   [63:0] grp_fu_464_p2;
reg   [63:0] div_i_reg_1451;
wire    ap_CS_fsm_state87;
wire   [31:0] grp_fu_452_p1;
reg   [31:0] dc_reg_1456;
wire    ap_CS_fsm_state89;
wire   [31:0] result_V_fu_725_p3;
reg   [31:0] result_V_reg_1463;
wire    ap_CS_fsm_state90;
wire   [0:0] or_ln174_fu_745_p2;
reg   [0:0] or_ln174_reg_1470;
wire   [31:0] grp_fu_449_p1;
reg   [31:0] conv1_i_i_reg_1476;
wire    ap_CS_fsm_state94;
wire   [0:0] icmp_ln174_2_fu_768_p2;
reg   [0:0] icmp_ln174_2_reg_1482;
wire    ap_CS_fsm_state95;
wire   [0:0] icmp_ln174_3_fu_774_p2;
reg   [0:0] icmp_ln174_3_reg_1487;
wire   [31:0] select_ln174_fu_809_p3;
reg   [31:0] select_ln174_reg_1492;
wire    ap_CS_fsm_state96;
wire   [31:0] header_fu_816_p2;
reg   [31:0] header_reg_1498;
wire   [2:0] add_ln184_fu_821_p2;
wire    ap_CS_fsm_state166;
wire   [31:0] or_ln2_fu_868_p3;
wire   [0:0] icmp_ln184_fu_827_p2;
wire   [1:0] trunc_ln190_fu_896_p1;
reg   [1:0] trunc_ln190_reg_1522;
wire   [0:0] icmp_ln209_fu_905_p2;
wire    ap_block_state237_pp2_stage0_iter0;
wire    ap_block_state240_pp2_stage0_iter1;
reg    ap_block_state240_io;
wire    ap_block_state243_pp2_stage0_iter2;
wire    ap_block_state246_pp2_stage0_iter3;
wire    ap_block_state249_pp2_stage0_iter4;
wire    ap_block_state252_pp2_stage0_iter5;
wire    ap_block_state255_pp2_stage0_iter6;
wire    ap_block_state258_pp2_stage0_iter7;
wire    ap_block_state261_pp2_stage0_iter8;
wire    ap_block_state264_pp2_stage0_iter9;
wire    ap_block_state267_pp2_stage0_iter10;
wire    ap_block_state270_pp2_stage0_iter11;
wire    ap_block_state273_pp2_stage0_iter12;
wire    ap_block_state276_pp2_stage0_iter13;
wire    ap_block_state279_pp2_stage0_iter14;
wire    ap_block_state282_pp2_stage0_iter15;
wire    ap_block_state285_pp2_stage0_iter16;
wire    ap_block_state288_pp2_stage0_iter17;
wire    ap_block_state291_pp2_stage0_iter18;
wire    ap_block_state294_pp2_stage0_iter19;
wire    ap_block_state297_pp2_stage0_iter20;
wire    ap_block_state300_pp2_stage0_iter21;
wire    ap_block_state303_pp2_stage0_iter22;
wire    ap_block_state306_pp2_stage0_iter23;
reg    ap_block_state309_pp2_stage0_iter24;
reg    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter2_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter3_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter4_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter5_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter6_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter7_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter8_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter9_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter10_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter11_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter12_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter13_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter14_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter15_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter16_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter17_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter18_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter19_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter20_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter21_reg;
reg   [0:0] icmp_ln209_reg_1528_pp2_iter22_reg;
wire   [63:0] add_ln190_fu_914_p2;
reg   [63:0] add_ln190_reg_1532;
wire   [1:0] add_ln216_3_fu_919_p2;
reg   [1:0] add_ln216_3_reg_1538;
wire   [3:0] shl_ln216_fu_928_p2;
reg   [3:0] shl_ln216_reg_1544;
reg   [63:0] gmem_addr_3_reg_1549;
wire   [1:0] add_ln216_4_fu_954_p2;
reg   [1:0] add_ln216_4_reg_1555;
wire   [3:0] shl_ln216_3_fu_964_p2;
reg   [3:0] shl_ln216_3_reg_1560;
wire   [3:0] trunc_ln192_fu_970_p1;
reg   [3:0] trunc_ln192_reg_1565;
wire   [15:0] cmprs_stream_dout;
wire    cmprs_stream_empty_n;
reg    cmprs_stream_read;
reg    ap_block_state238_pp2_stage1_iter0;
reg    ap_block_state238_io;
wire    ap_block_state241_pp2_stage1_iter1;
reg    ap_block_state241_io;
wire    ap_block_state244_pp2_stage1_iter2;
wire    ap_block_state247_pp2_stage1_iter3;
wire    ap_block_state250_pp2_stage1_iter4;
wire    ap_block_state253_pp2_stage1_iter5;
wire    ap_block_state256_pp2_stage1_iter6;
wire    ap_block_state259_pp2_stage1_iter7;
wire    ap_block_state262_pp2_stage1_iter8;
wire    ap_block_state265_pp2_stage1_iter9;
wire    ap_block_state268_pp2_stage1_iter10;
wire    ap_block_state271_pp2_stage1_iter11;
wire    ap_block_state274_pp2_stage1_iter12;
wire    ap_block_state277_pp2_stage1_iter13;
wire    ap_block_state280_pp2_stage1_iter14;
wire    ap_block_state283_pp2_stage1_iter15;
wire    ap_block_state286_pp2_stage1_iter16;
wire    ap_block_state289_pp2_stage1_iter17;
wire    ap_block_state292_pp2_stage1_iter18;
wire    ap_block_state295_pp2_stage1_iter19;
wire    ap_block_state298_pp2_stage1_iter20;
wire    ap_block_state301_pp2_stage1_iter21;
wire    ap_block_state304_pp2_stage1_iter22;
reg    ap_block_state307_pp2_stage1_iter23;
reg    ap_block_pp2_stage1_11001;
wire   [31:0] shl_ln216_2_fu_989_p2;
reg   [31:0] shl_ln216_2_reg_1570;
reg   [63:0] gmem_addr_4_reg_1575;
wire   [1:0] xor_ln216_fu_1025_p2;
reg   [1:0] xor_ln216_reg_1581;
wire   [3:0] shl_ln216_6_fu_1034_p2;
reg   [3:0] shl_ln216_6_reg_1586;
reg   [63:0] gmem_addr_5_reg_1591;
wire   [63:0] add_ln216_2_fu_1060_p2;
reg   [63:0] add_ln216_2_reg_1597;
reg    ap_block_state239_pp2_stage2_iter0;
reg    ap_block_state239_io;
wire    ap_block_state242_pp2_stage2_iter1;
wire    ap_block_state245_pp2_stage2_iter2;
wire    ap_block_state248_pp2_stage2_iter3;
wire    ap_block_state251_pp2_stage2_iter4;
wire    ap_block_state254_pp2_stage2_iter5;
wire    ap_block_state257_pp2_stage2_iter6;
wire    ap_block_state260_pp2_stage2_iter7;
wire    ap_block_state263_pp2_stage2_iter8;
wire    ap_block_state266_pp2_stage2_iter9;
wire    ap_block_state269_pp2_stage2_iter10;
wire    ap_block_state272_pp2_stage2_iter11;
wire    ap_block_state275_pp2_stage2_iter12;
wire    ap_block_state278_pp2_stage2_iter13;
wire    ap_block_state281_pp2_stage2_iter14;
wire    ap_block_state284_pp2_stage2_iter15;
wire    ap_block_state287_pp2_stage2_iter16;
wire    ap_block_state290_pp2_stage2_iter17;
wire    ap_block_state293_pp2_stage2_iter18;
wire    ap_block_state296_pp2_stage2_iter19;
wire    ap_block_state299_pp2_stage2_iter20;
wire    ap_block_state302_pp2_stage2_iter21;
wire    ap_block_state305_pp2_stage2_iter22;
reg    ap_block_state308_pp2_stage2_iter23;
reg    ap_block_pp2_stage2_11001;
wire   [31:0] shl_ln216_5_fu_1102_p2;
reg   [31:0] shl_ln216_5_reg_1602;
wire   [31:0] shl_ln216_8_fu_1123_p2;
reg   [31:0] shl_ln216_8_reg_1607;
wire   [31:0] i_6_fu_1129_p2;
reg   [31:0] i_6_reg_1612;
wire   [0:0] icmp_ln218_fu_1207_p2;
wire    ap_CS_fsm_state310;
wire   [1:0] add_ln223_1_fu_1221_p2;
reg   [1:0] add_ln223_1_reg_1621;
reg   [63:0] gmem_addr_6_reg_1628;
reg   [63:0] gmem_addr_7_reg_1634;
wire   [3:0] trunc_ln222_fu_1272_p1;
reg   [3:0] trunc_ln222_reg_1640;
wire   [3:0] shl_ln223_fu_1283_p2;
reg   [3:0] shl_ln223_reg_1645;
wire   [31:0] shl_ln223_2_fu_1300_p2;
reg   [31:0] shl_ln223_2_reg_1650;
wire   [3:0] shl_ln223_3_fu_1326_p2;
reg   [3:0] shl_ln223_3_reg_1655;
wire   [31:0] shl_ln223_5_fu_1344_p2;
reg   [31:0] shl_ln223_5_reg_1660;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
reg    ap_enable_reg_pp0_iter59;
reg    ap_enable_reg_pp0_iter60;
reg    ap_enable_reg_pp0_iter61;
reg    ap_enable_reg_pp0_iter62;
reg    ap_enable_reg_pp0_iter63;
reg    ap_enable_reg_pp0_iter64;
reg    ap_enable_reg_pp0_iter65;
reg    ap_enable_reg_pp0_iter66;
reg    ap_enable_reg_pp0_iter67;
reg    ap_enable_reg_pp0_iter68;
reg    ap_enable_reg_pp0_iter69;
reg    ap_enable_reg_pp0_iter70;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state237;
reg    ap_block_pp2_stage2_subdone;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
reg    ap_enable_reg_pp2_iter12;
reg    ap_enable_reg_pp2_iter13;
reg    ap_enable_reg_pp2_iter14;
reg    ap_enable_reg_pp2_iter15;
reg    ap_enable_reg_pp2_iter16;
reg    ap_enable_reg_pp2_iter17;
reg    ap_enable_reg_pp2_iter18;
reg    ap_enable_reg_pp2_iter19;
reg    ap_enable_reg_pp2_iter20;
reg    ap_enable_reg_pp2_iter21;
reg    ap_enable_reg_pp2_iter22;
wire    grp_compute_lzw_fu_430_ap_start;
wire    grp_compute_lzw_fu_430_ap_done;
wire    grp_compute_lzw_fu_430_ap_idle;
wire    grp_compute_lzw_fu_430_ap_ready;
wire    grp_compute_lzw_fu_430_chr_stream1_read;
wire   [15:0] grp_compute_lzw_fu_430_cmprs_stream2_din;
wire    grp_compute_lzw_fu_430_cmprs_stream2_write;
wire   [31:0] grp_compute_lzw_fu_430_cmprs_len_stream3_din;
wire    grp_compute_lzw_fu_430_cmprs_len_stream3_write;
wire   [14:0] grp_compute_lzw_fu_430_hash_table_address0;
wire    grp_compute_lzw_fu_430_hash_table_ce0;
wire    grp_compute_lzw_fu_430_hash_table_we0;
wire   [32:0] grp_compute_lzw_fu_430_hash_table_d0;
wire   [8:0] grp_compute_lzw_fu_430_my_assoc_mem_upper_key_mem_address0;
wire    grp_compute_lzw_fu_430_my_assoc_mem_upper_key_mem_ce0;
wire    grp_compute_lzw_fu_430_my_assoc_mem_upper_key_mem_we0;
wire   [63:0] grp_compute_lzw_fu_430_my_assoc_mem_upper_key_mem_d0;
wire   [8:0] grp_compute_lzw_fu_430_my_assoc_mem_middle_key_mem_address0;
wire    grp_compute_lzw_fu_430_my_assoc_mem_middle_key_mem_ce0;
wire    grp_compute_lzw_fu_430_my_assoc_mem_middle_key_mem_we0;
wire   [63:0] grp_compute_lzw_fu_430_my_assoc_mem_middle_key_mem_d0;
wire   [8:0] grp_compute_lzw_fu_430_my_assoc_mem_lower_key_mem_address0;
wire    grp_compute_lzw_fu_430_my_assoc_mem_lower_key_mem_ce0;
wire    grp_compute_lzw_fu_430_my_assoc_mem_lower_key_mem_we0;
wire   [63:0] grp_compute_lzw_fu_430_my_assoc_mem_lower_key_mem_d0;
wire   [5:0] grp_compute_lzw_fu_430_my_assoc_mem_value_address0;
wire    grp_compute_lzw_fu_430_my_assoc_mem_value_ce0;
wire    grp_compute_lzw_fu_430_my_assoc_mem_value_we0;
wire   [11:0] grp_compute_lzw_fu_430_my_assoc_mem_value_d0;
reg   [2:0] i_4_reg_382;
reg   [31:0] shiftreg_reg_393;
reg   [63:0] ap_phi_mux_j_phi_fu_410_p4;
reg   [31:0] ap_phi_mux_i_5_phi_fu_422_p4;
reg    grp_compute_lzw_fu_430_ap_start_reg;
wire   [7:0] chr_stream_dout;
wire    chr_stream_empty_n;
reg    chr_stream_read;
wire    ap_CS_fsm_state76;
wire    cmprs_stream_full_n;
reg    cmprs_stream_write;
wire    cmprs_len_stream_full_n;
reg    cmprs_len_stream_write;
wire  signed [63:0] sext_ln174_fu_520_p1;
wire  signed [63:0] sext_ln202_fu_565_p1;
wire  signed [63:0] sext_ln207_fu_885_p1;
wire  signed [63:0] sext_ln216_fu_944_p1;
wire  signed [63:0] sext_ln216_1_fu_1010_p1;
wire  signed [63:0] sext_ln216_2_fu_1050_p1;
wire  signed [63:0] sext_ln223_fu_1236_p1;
wire  signed [63:0] sext_ln223_1_fu_1262_p1;
reg    ap_block_pp2_stage2_01001;
reg    ap_block_pp2_stage0_01001;
reg    ap_block_pp2_stage1_01001;
reg    ap_block_state312_io;
reg    ap_block_state381;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] cmprs_len_stream_dout;
wire    cmprs_len_stream_empty_n;
reg    cmprs_len_stream_read;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state78;
wire   [63:0] i_cast_fu_497_p1;
wire   [63:0] add_ln174_fu_505_p2;
wire   [61:0] trunc_ln174_3_fu_510_p4;
wire   [1:0] trunc_ln174_2_fu_501_p1;
wire   [4:0] shl_ln2_fu_535_p3;
wire   [31:0] zext_ln174_fu_542_p1;
wire   [31:0] lshr_ln174_fu_546_p2;
wire   [61:0] trunc_ln6_fu_556_p4;
wire   [31:0] shl_ln201_fu_576_p2;
wire   [31:0] shl_ln201_1_fu_582_p2;
wire   [31:0] data_V_fu_594_p1;
wire   [22:0] tmp_16_fu_615_p1;
wire   [24:0] mantissa_fu_619_p4;
wire   [7:0] tmp_15_fu_605_p4;
wire   [8:0] zext_ln341_fu_633_p1;
wire   [8:0] add_ln341_fu_637_p2;
wire   [7:0] sub_ln1311_fu_651_p2;
wire   [0:0] isNeg_fu_643_p3;
wire  signed [8:0] sext_ln1311_fu_657_p1;
wire   [8:0] ush_fu_661_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i_i_i_cast_cast_cast_fu_669_p1;
wire   [78:0] zext_ln15_fu_629_p1;
wire   [78:0] sh_prom_i_i_i_i_i_i_i_cast_cast_cast_cast_fu_673_p1;
wire   [78:0] r_V_fu_677_p2;
wire   [0:0] tmp_fu_689_p3;
wire   [78:0] r_V_1_fu_683_p2;
wire   [31:0] zext_ln662_fu_697_p1;
wire   [31:0] tmp_s_fu_701_p4;
wire   [31:0] val_fu_711_p3;
wire   [0:0] p_Result_s_fu_597_p3;
wire   [31:0] result_V_2_fu_719_p2;
wire   [0:0] icmp_ln174_1_fu_739_p2;
wire   [0:0] icmp_ln174_fu_733_p2;
wire   [31:0] bitcast_ln174_fu_751_p1;
wire   [7:0] tmp_1_fu_754_p4;
wire   [22:0] trunc_ln174_1_fu_764_p1;
wire   [0:0] or_ln174_1_fu_780_p2;
wire   [0:0] and_ln174_fu_784_p2;
wire   [0:0] grp_fu_455_p2;
wire   [0:0] grp_fu_459_p2;
wire   [0:0] and_ln177_fu_795_p2;
wire   [31:0] zext_ln177_fu_800_p1;
wire   [0:0] and_ln174_1_fu_789_p2;
wire   [31:0] add_ln177_fu_804_p2;
wire   [1:0] trunc_ln185_fu_833_p1;
wire   [4:0] shl_ln3_fu_837_p3;
wire   [31:0] zext_ln185_fu_845_p1;
wire   [31:0] lshr_ln185_fu_849_p2;
wire   [7:0] trunc_ln185_1_fu_854_p1;
wire   [23:0] lshr_ln185_1_fu_858_p4;
wire   [61:0] trunc_ln7_fu_876_p4;
wire   [31:0] or_ln209_fu_899_p2;
wire   [1:0] trunc_ln190_1_fu_910_p1;
wire   [3:0] zext_ln216_1_fu_924_p1;
wire   [61:0] trunc_ln_fu_934_p4;
wire   [3:0] zext_ln216_4_fu_960_p1;
wire   [7:0] grp_fu_472_p4;
wire   [4:0] shl_ln216_1_fu_978_p3;
wire   [31:0] zext_ln216_fu_974_p1;
wire   [31:0] zext_ln216_2_fu_985_p1;
wire   [63:0] add_ln216_fu_995_p2;
wire   [61:0] trunc_ln216_1_fu_1000_p4;
wire   [3:0] zext_ln216_7_fu_1030_p1;
wire   [63:0] add_ln216_1_fu_1020_p2;
wire   [61:0] trunc_ln216_2_fu_1040_p4;
wire   [3:0] trunc_ln192_1_fu_1066_p4;
wire   [7:0] or_ln_fu_1076_p3;
wire   [4:0] shl_ln216_4_fu_1091_p3;
wire   [31:0] zext_ln216_3_fu_1087_p1;
wire   [31:0] zext_ln216_5_fu_1098_p1;
wire   [7:0] trunc_ln194_fu_1083_p1;
wire   [4:0] shl_ln216_7_fu_1112_p3;
wire   [31:0] zext_ln216_6_fu_1108_p1;
wire   [31:0] zext_ln216_8_fu_1119_p1;
wire   [30:0] tmp_11_fu_1135_p4;
wire   [0:0] icmp_ln209_1_fu_1144_p2;
wire   [29:0] tmp_12_fu_1150_p4;
wire   [29:0] select_ln209_fu_1159_p3;
wire   [31:0] and_ln_fu_1171_p3;
wire   [31:0] zext_ln218_fu_1167_p1;
wire   [30:0] and_ln1_fu_1185_p3;
wire   [31:0] sub_ln218_fu_1179_p2;
wire   [31:0] zext_ln218_1_fu_1193_p1;
wire   [31:0] add_ln218_fu_1201_p2;
wire  signed [63:0] sext_ln221_fu_1212_p1;
wire   [1:0] trunc_ln218_fu_1197_p1;
wire   [63:0] add_ln221_fu_1216_p2;
wire   [61:0] trunc_ln1_fu_1226_p4;
wire   [63:0] add_ln223_fu_1246_p2;
wire   [61:0] trunc_ln223_1_fu_1252_p4;
wire   [3:0] zext_ln223_1_fu_1280_p1;
wire   [4:0] shl_ln223_1_fu_1289_p3;
wire   [31:0] zext_ln223_fu_1276_p1;
wire   [31:0] zext_ln223_2_fu_1296_p1;
wire   [7:0] shl_ln4_fu_1306_p3;
wire   [1:0] add_ln223_2_fu_1317_p2;
wire   [3:0] zext_ln223_4_fu_1322_p1;
wire   [4:0] shl_ln223_4_fu_1332_p3;
wire   [31:0] zext_ln223_3_fu_1313_p1;
wire   [31:0] zext_ln223_5_fu_1340_p1;
reg   [238:0] ap_NS_fsm;
reg    ap_block_pp2_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 239'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter71 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter23 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter72 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp0_iter59 = 1'b0;
#0 ap_enable_reg_pp0_iter60 = 1'b0;
#0 ap_enable_reg_pp0_iter61 = 1'b0;
#0 ap_enable_reg_pp0_iter62 = 1'b0;
#0 ap_enable_reg_pp0_iter63 = 1'b0;
#0 ap_enable_reg_pp0_iter64 = 1'b0;
#0 ap_enable_reg_pp0_iter65 = 1'b0;
#0 ap_enable_reg_pp0_iter66 = 1'b0;
#0 ap_enable_reg_pp0_iter67 = 1'b0;
#0 ap_enable_reg_pp0_iter68 = 1'b0;
#0 ap_enable_reg_pp0_iter69 = 1'b0;
#0 ap_enable_reg_pp0_iter70 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp2_iter12 = 1'b0;
#0 ap_enable_reg_pp2_iter13 = 1'b0;
#0 ap_enable_reg_pp2_iter14 = 1'b0;
#0 ap_enable_reg_pp2_iter15 = 1'b0;
#0 ap_enable_reg_pp2_iter16 = 1'b0;
#0 ap_enable_reg_pp2_iter17 = 1'b0;
#0 ap_enable_reg_pp2_iter18 = 1'b0;
#0 ap_enable_reg_pp2_iter19 = 1'b0;
#0 ap_enable_reg_pp2_iter20 = 1'b0;
#0 ap_enable_reg_pp2_iter21 = 1'b0;
#0 ap_enable_reg_pp2_iter22 = 1'b0;
#0 grp_compute_lzw_fu_430_ap_start_reg = 1'b0;
end

lzw_stream_compute_lzw grp_compute_lzw_fu_430(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_compute_lzw_fu_430_ap_start),
    .ap_done(grp_compute_lzw_fu_430_ap_done),
    .ap_idle(grp_compute_lzw_fu_430_ap_idle),
    .ap_ready(grp_compute_lzw_fu_430_ap_ready),
    .chr_stream1_dout(chr_stream_dout),
    .chr_stream1_empty_n(chr_stream_empty_n),
    .chr_stream1_read(grp_compute_lzw_fu_430_chr_stream1_read),
    .cmprs_stream2_din(grp_compute_lzw_fu_430_cmprs_stream2_din),
    .cmprs_stream2_full_n(cmprs_stream_full_n),
    .cmprs_stream2_write(grp_compute_lzw_fu_430_cmprs_stream2_write),
    .cmprs_len_stream3_din(grp_compute_lzw_fu_430_cmprs_len_stream3_din),
    .cmprs_len_stream3_full_n(cmprs_len_stream_full_n),
    .cmprs_len_stream3_write(grp_compute_lzw_fu_430_cmprs_len_stream3_write),
    .length_r(length_r),
    .hash_table_address0(grp_compute_lzw_fu_430_hash_table_address0),
    .hash_table_ce0(grp_compute_lzw_fu_430_hash_table_ce0),
    .hash_table_we0(grp_compute_lzw_fu_430_hash_table_we0),
    .hash_table_d0(grp_compute_lzw_fu_430_hash_table_d0),
    .hash_table_q0(hash_table_q0),
    .my_assoc_mem_upper_key_mem_address0(grp_compute_lzw_fu_430_my_assoc_mem_upper_key_mem_address0),
    .my_assoc_mem_upper_key_mem_ce0(grp_compute_lzw_fu_430_my_assoc_mem_upper_key_mem_ce0),
    .my_assoc_mem_upper_key_mem_we0(grp_compute_lzw_fu_430_my_assoc_mem_upper_key_mem_we0),
    .my_assoc_mem_upper_key_mem_d0(grp_compute_lzw_fu_430_my_assoc_mem_upper_key_mem_d0),
    .my_assoc_mem_upper_key_mem_q0(my_assoc_mem_upper_key_mem_q0),
    .my_assoc_mem_middle_key_mem_address0(grp_compute_lzw_fu_430_my_assoc_mem_middle_key_mem_address0),
    .my_assoc_mem_middle_key_mem_ce0(grp_compute_lzw_fu_430_my_assoc_mem_middle_key_mem_ce0),
    .my_assoc_mem_middle_key_mem_we0(grp_compute_lzw_fu_430_my_assoc_mem_middle_key_mem_we0),
    .my_assoc_mem_middle_key_mem_d0(grp_compute_lzw_fu_430_my_assoc_mem_middle_key_mem_d0),
    .my_assoc_mem_middle_key_mem_q0(my_assoc_mem_middle_key_mem_q0),
    .my_assoc_mem_lower_key_mem_address0(grp_compute_lzw_fu_430_my_assoc_mem_lower_key_mem_address0),
    .my_assoc_mem_lower_key_mem_ce0(grp_compute_lzw_fu_430_my_assoc_mem_lower_key_mem_ce0),
    .my_assoc_mem_lower_key_mem_we0(grp_compute_lzw_fu_430_my_assoc_mem_lower_key_mem_we0),
    .my_assoc_mem_lower_key_mem_d0(grp_compute_lzw_fu_430_my_assoc_mem_lower_key_mem_d0),
    .my_assoc_mem_lower_key_mem_q0(my_assoc_mem_lower_key_mem_q0),
    .my_assoc_mem_value_address0(grp_compute_lzw_fu_430_my_assoc_mem_value_address0),
    .my_assoc_mem_value_ce0(grp_compute_lzw_fu_430_my_assoc_mem_value_ce0),
    .my_assoc_mem_value_we0(grp_compute_lzw_fu_430_my_assoc_mem_value_we0),
    .my_assoc_mem_value_d0(grp_compute_lzw_fu_430_my_assoc_mem_value_d0),
    .my_assoc_mem_value_q0(my_assoc_mem_value_q0),
    .my_assoc_mem_fill_read(my_assoc_mem_fill_read)
);

lzw_stream_sitofp_32ns_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_4_no_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(result_V_reg_1463),
    .ce(1'b1),
    .dout(grp_fu_449_p1)
);

lzw_stream_fptrunc_64ns_32_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
fptrunc_64ns_32_2_no_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(div_i_reg_1451),
    .ce(1'b1),
    .dout(grp_fu_452_p1)
);

lzw_stream_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dc_reg_1456),
    .din1(conv1_i_i_reg_1476),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_455_p2)
);

lzw_stream_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dc_reg_1456),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_459_p2)
);

lzw_stream_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_i_reg_1446),
    .din1(64'd4593671619917905920),
    .ce(1'b1),
    .dout(grp_fu_464_p2)
);

lzw_stream_sitodp_32ns_64_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_4_no_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(total_bits_reg_1441),
    .ce(1'b1),
    .dout(grp_fu_469_p1)
);

lzw_stream_fifo_w8_d2_S chr_stream_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(chr_stream_din),
    .if_full_n(chr_stream_full_n),
    .if_write(chr_stream_write),
    .if_dout(chr_stream_dout),
    .if_empty_n(chr_stream_empty_n),
    .if_read(chr_stream_read)
);

lzw_stream_fifo_w16_d2_S cmprs_stream_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_compute_lzw_fu_430_cmprs_stream2_din),
    .if_full_n(cmprs_stream_full_n),
    .if_write(cmprs_stream_write),
    .if_dout(cmprs_stream_dout),
    .if_empty_n(cmprs_stream_empty_n),
    .if_read(cmprs_stream_read)
);

lzw_stream_fifo_w32_d2_S cmprs_len_stream_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_compute_lzw_fu_430_cmprs_len_stream3_din),
    .if_full_n(cmprs_len_stream_full_n),
    .if_write(cmprs_len_stream_write),
    .if_dout(cmprs_len_stream_dout),
    .if_empty_n(cmprs_len_stream_empty_n),
    .if_read(cmprs_len_stream_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter59 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter60 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter61 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter62 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter63 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter64 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter65 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter66 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter67 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter68 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter69 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter70 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter71 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter72 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter72 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state237))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state236))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter12 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter13 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter14 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter15 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter16 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter17 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter18 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter19 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter20 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter21 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter22 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter23 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter24 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp2_iter23 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2)))) begin
            ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
        end else if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state236))) begin
            ap_enable_reg_pp2_iter24 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage2_subdone) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_compute_lzw_fu_430_ap_start_reg <= 1'b0;
    end else begin
        if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
            grp_compute_lzw_fu_430_ap_start_reg <= 1'b1;
        end else if ((grp_compute_lzw_fu_430_ap_ready == 1'b1)) begin
            grp_compute_lzw_fu_430_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state165))) begin
        i_4_reg_382 <= 3'd0;
    end else if (((icmp_ln184_fu_827_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state166))) begin
        i_4_reg_382 <= add_ln184_fu_821_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state236))) begin
        i_5_reg_418 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln209_reg_1528 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_5_reg_418 <= i_6_reg_1612;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_371 <= 32'd0;
    end else if (((icmp_ln157_fu_492_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_371 <= add_ln157_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state236))) begin
        j_reg_406 <= 64'd4;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln209_reg_1528 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_reg_406 <= add_ln216_2_reg_1597;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state165))) begin
        shiftreg_reg_393 <= 32'd0;
    end else if (((icmp_ln184_fu_827_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state166))) begin
        shiftreg_reg_393 <= or_ln2_fu_868_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln157_fu_492_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln174_1_reg_1417 <= add_ln174_1_fu_530_p2;
        gmem_addr_reg_1411 <= sext_ln174_fu_520_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln174_1_reg_1417_pp0_iter10_reg <= add_ln174_1_reg_1417_pp0_iter9_reg;
        add_ln174_1_reg_1417_pp0_iter11_reg <= add_ln174_1_reg_1417_pp0_iter10_reg;
        add_ln174_1_reg_1417_pp0_iter12_reg <= add_ln174_1_reg_1417_pp0_iter11_reg;
        add_ln174_1_reg_1417_pp0_iter13_reg <= add_ln174_1_reg_1417_pp0_iter12_reg;
        add_ln174_1_reg_1417_pp0_iter14_reg <= add_ln174_1_reg_1417_pp0_iter13_reg;
        add_ln174_1_reg_1417_pp0_iter15_reg <= add_ln174_1_reg_1417_pp0_iter14_reg;
        add_ln174_1_reg_1417_pp0_iter16_reg <= add_ln174_1_reg_1417_pp0_iter15_reg;
        add_ln174_1_reg_1417_pp0_iter17_reg <= add_ln174_1_reg_1417_pp0_iter16_reg;
        add_ln174_1_reg_1417_pp0_iter18_reg <= add_ln174_1_reg_1417_pp0_iter17_reg;
        add_ln174_1_reg_1417_pp0_iter19_reg <= add_ln174_1_reg_1417_pp0_iter18_reg;
        add_ln174_1_reg_1417_pp0_iter20_reg <= add_ln174_1_reg_1417_pp0_iter19_reg;
        add_ln174_1_reg_1417_pp0_iter21_reg <= add_ln174_1_reg_1417_pp0_iter20_reg;
        add_ln174_1_reg_1417_pp0_iter22_reg <= add_ln174_1_reg_1417_pp0_iter21_reg;
        add_ln174_1_reg_1417_pp0_iter23_reg <= add_ln174_1_reg_1417_pp0_iter22_reg;
        add_ln174_1_reg_1417_pp0_iter24_reg <= add_ln174_1_reg_1417_pp0_iter23_reg;
        add_ln174_1_reg_1417_pp0_iter25_reg <= add_ln174_1_reg_1417_pp0_iter24_reg;
        add_ln174_1_reg_1417_pp0_iter26_reg <= add_ln174_1_reg_1417_pp0_iter25_reg;
        add_ln174_1_reg_1417_pp0_iter27_reg <= add_ln174_1_reg_1417_pp0_iter26_reg;
        add_ln174_1_reg_1417_pp0_iter28_reg <= add_ln174_1_reg_1417_pp0_iter27_reg;
        add_ln174_1_reg_1417_pp0_iter29_reg <= add_ln174_1_reg_1417_pp0_iter28_reg;
        add_ln174_1_reg_1417_pp0_iter2_reg <= add_ln174_1_reg_1417_pp0_iter1_reg;
        add_ln174_1_reg_1417_pp0_iter30_reg <= add_ln174_1_reg_1417_pp0_iter29_reg;
        add_ln174_1_reg_1417_pp0_iter31_reg <= add_ln174_1_reg_1417_pp0_iter30_reg;
        add_ln174_1_reg_1417_pp0_iter32_reg <= add_ln174_1_reg_1417_pp0_iter31_reg;
        add_ln174_1_reg_1417_pp0_iter33_reg <= add_ln174_1_reg_1417_pp0_iter32_reg;
        add_ln174_1_reg_1417_pp0_iter34_reg <= add_ln174_1_reg_1417_pp0_iter33_reg;
        add_ln174_1_reg_1417_pp0_iter35_reg <= add_ln174_1_reg_1417_pp0_iter34_reg;
        add_ln174_1_reg_1417_pp0_iter36_reg <= add_ln174_1_reg_1417_pp0_iter35_reg;
        add_ln174_1_reg_1417_pp0_iter37_reg <= add_ln174_1_reg_1417_pp0_iter36_reg;
        add_ln174_1_reg_1417_pp0_iter38_reg <= add_ln174_1_reg_1417_pp0_iter37_reg;
        add_ln174_1_reg_1417_pp0_iter39_reg <= add_ln174_1_reg_1417_pp0_iter38_reg;
        add_ln174_1_reg_1417_pp0_iter3_reg <= add_ln174_1_reg_1417_pp0_iter2_reg;
        add_ln174_1_reg_1417_pp0_iter40_reg <= add_ln174_1_reg_1417_pp0_iter39_reg;
        add_ln174_1_reg_1417_pp0_iter41_reg <= add_ln174_1_reg_1417_pp0_iter40_reg;
        add_ln174_1_reg_1417_pp0_iter42_reg <= add_ln174_1_reg_1417_pp0_iter41_reg;
        add_ln174_1_reg_1417_pp0_iter43_reg <= add_ln174_1_reg_1417_pp0_iter42_reg;
        add_ln174_1_reg_1417_pp0_iter44_reg <= add_ln174_1_reg_1417_pp0_iter43_reg;
        add_ln174_1_reg_1417_pp0_iter45_reg <= add_ln174_1_reg_1417_pp0_iter44_reg;
        add_ln174_1_reg_1417_pp0_iter46_reg <= add_ln174_1_reg_1417_pp0_iter45_reg;
        add_ln174_1_reg_1417_pp0_iter47_reg <= add_ln174_1_reg_1417_pp0_iter46_reg;
        add_ln174_1_reg_1417_pp0_iter48_reg <= add_ln174_1_reg_1417_pp0_iter47_reg;
        add_ln174_1_reg_1417_pp0_iter49_reg <= add_ln174_1_reg_1417_pp0_iter48_reg;
        add_ln174_1_reg_1417_pp0_iter4_reg <= add_ln174_1_reg_1417_pp0_iter3_reg;
        add_ln174_1_reg_1417_pp0_iter50_reg <= add_ln174_1_reg_1417_pp0_iter49_reg;
        add_ln174_1_reg_1417_pp0_iter51_reg <= add_ln174_1_reg_1417_pp0_iter50_reg;
        add_ln174_1_reg_1417_pp0_iter52_reg <= add_ln174_1_reg_1417_pp0_iter51_reg;
        add_ln174_1_reg_1417_pp0_iter53_reg <= add_ln174_1_reg_1417_pp0_iter52_reg;
        add_ln174_1_reg_1417_pp0_iter54_reg <= add_ln174_1_reg_1417_pp0_iter53_reg;
        add_ln174_1_reg_1417_pp0_iter55_reg <= add_ln174_1_reg_1417_pp0_iter54_reg;
        add_ln174_1_reg_1417_pp0_iter56_reg <= add_ln174_1_reg_1417_pp0_iter55_reg;
        add_ln174_1_reg_1417_pp0_iter57_reg <= add_ln174_1_reg_1417_pp0_iter56_reg;
        add_ln174_1_reg_1417_pp0_iter58_reg <= add_ln174_1_reg_1417_pp0_iter57_reg;
        add_ln174_1_reg_1417_pp0_iter59_reg <= add_ln174_1_reg_1417_pp0_iter58_reg;
        add_ln174_1_reg_1417_pp0_iter5_reg <= add_ln174_1_reg_1417_pp0_iter4_reg;
        add_ln174_1_reg_1417_pp0_iter60_reg <= add_ln174_1_reg_1417_pp0_iter59_reg;
        add_ln174_1_reg_1417_pp0_iter61_reg <= add_ln174_1_reg_1417_pp0_iter60_reg;
        add_ln174_1_reg_1417_pp0_iter62_reg <= add_ln174_1_reg_1417_pp0_iter61_reg;
        add_ln174_1_reg_1417_pp0_iter63_reg <= add_ln174_1_reg_1417_pp0_iter62_reg;
        add_ln174_1_reg_1417_pp0_iter64_reg <= add_ln174_1_reg_1417_pp0_iter63_reg;
        add_ln174_1_reg_1417_pp0_iter65_reg <= add_ln174_1_reg_1417_pp0_iter64_reg;
        add_ln174_1_reg_1417_pp0_iter66_reg <= add_ln174_1_reg_1417_pp0_iter65_reg;
        add_ln174_1_reg_1417_pp0_iter67_reg <= add_ln174_1_reg_1417_pp0_iter66_reg;
        add_ln174_1_reg_1417_pp0_iter68_reg <= add_ln174_1_reg_1417_pp0_iter67_reg;
        add_ln174_1_reg_1417_pp0_iter69_reg <= add_ln174_1_reg_1417_pp0_iter68_reg;
        add_ln174_1_reg_1417_pp0_iter6_reg <= add_ln174_1_reg_1417_pp0_iter5_reg;
        add_ln174_1_reg_1417_pp0_iter70_reg <= add_ln174_1_reg_1417_pp0_iter69_reg;
        add_ln174_1_reg_1417_pp0_iter71_reg <= add_ln174_1_reg_1417_pp0_iter70_reg;
        add_ln174_1_reg_1417_pp0_iter7_reg <= add_ln174_1_reg_1417_pp0_iter6_reg;
        add_ln174_1_reg_1417_pp0_iter8_reg <= add_ln174_1_reg_1417_pp0_iter7_reg;
        add_ln174_1_reg_1417_pp0_iter9_reg <= add_ln174_1_reg_1417_pp0_iter8_reg;
        icmp_ln157_reg_1407_pp0_iter10_reg <= icmp_ln157_reg_1407_pp0_iter9_reg;
        icmp_ln157_reg_1407_pp0_iter11_reg <= icmp_ln157_reg_1407_pp0_iter10_reg;
        icmp_ln157_reg_1407_pp0_iter12_reg <= icmp_ln157_reg_1407_pp0_iter11_reg;
        icmp_ln157_reg_1407_pp0_iter13_reg <= icmp_ln157_reg_1407_pp0_iter12_reg;
        icmp_ln157_reg_1407_pp0_iter14_reg <= icmp_ln157_reg_1407_pp0_iter13_reg;
        icmp_ln157_reg_1407_pp0_iter15_reg <= icmp_ln157_reg_1407_pp0_iter14_reg;
        icmp_ln157_reg_1407_pp0_iter16_reg <= icmp_ln157_reg_1407_pp0_iter15_reg;
        icmp_ln157_reg_1407_pp0_iter17_reg <= icmp_ln157_reg_1407_pp0_iter16_reg;
        icmp_ln157_reg_1407_pp0_iter18_reg <= icmp_ln157_reg_1407_pp0_iter17_reg;
        icmp_ln157_reg_1407_pp0_iter19_reg <= icmp_ln157_reg_1407_pp0_iter18_reg;
        icmp_ln157_reg_1407_pp0_iter20_reg <= icmp_ln157_reg_1407_pp0_iter19_reg;
        icmp_ln157_reg_1407_pp0_iter21_reg <= icmp_ln157_reg_1407_pp0_iter20_reg;
        icmp_ln157_reg_1407_pp0_iter22_reg <= icmp_ln157_reg_1407_pp0_iter21_reg;
        icmp_ln157_reg_1407_pp0_iter23_reg <= icmp_ln157_reg_1407_pp0_iter22_reg;
        icmp_ln157_reg_1407_pp0_iter24_reg <= icmp_ln157_reg_1407_pp0_iter23_reg;
        icmp_ln157_reg_1407_pp0_iter25_reg <= icmp_ln157_reg_1407_pp0_iter24_reg;
        icmp_ln157_reg_1407_pp0_iter26_reg <= icmp_ln157_reg_1407_pp0_iter25_reg;
        icmp_ln157_reg_1407_pp0_iter27_reg <= icmp_ln157_reg_1407_pp0_iter26_reg;
        icmp_ln157_reg_1407_pp0_iter28_reg <= icmp_ln157_reg_1407_pp0_iter27_reg;
        icmp_ln157_reg_1407_pp0_iter29_reg <= icmp_ln157_reg_1407_pp0_iter28_reg;
        icmp_ln157_reg_1407_pp0_iter2_reg <= icmp_ln157_reg_1407_pp0_iter1_reg;
        icmp_ln157_reg_1407_pp0_iter30_reg <= icmp_ln157_reg_1407_pp0_iter29_reg;
        icmp_ln157_reg_1407_pp0_iter31_reg <= icmp_ln157_reg_1407_pp0_iter30_reg;
        icmp_ln157_reg_1407_pp0_iter32_reg <= icmp_ln157_reg_1407_pp0_iter31_reg;
        icmp_ln157_reg_1407_pp0_iter33_reg <= icmp_ln157_reg_1407_pp0_iter32_reg;
        icmp_ln157_reg_1407_pp0_iter34_reg <= icmp_ln157_reg_1407_pp0_iter33_reg;
        icmp_ln157_reg_1407_pp0_iter35_reg <= icmp_ln157_reg_1407_pp0_iter34_reg;
        icmp_ln157_reg_1407_pp0_iter36_reg <= icmp_ln157_reg_1407_pp0_iter35_reg;
        icmp_ln157_reg_1407_pp0_iter37_reg <= icmp_ln157_reg_1407_pp0_iter36_reg;
        icmp_ln157_reg_1407_pp0_iter38_reg <= icmp_ln157_reg_1407_pp0_iter37_reg;
        icmp_ln157_reg_1407_pp0_iter39_reg <= icmp_ln157_reg_1407_pp0_iter38_reg;
        icmp_ln157_reg_1407_pp0_iter3_reg <= icmp_ln157_reg_1407_pp0_iter2_reg;
        icmp_ln157_reg_1407_pp0_iter40_reg <= icmp_ln157_reg_1407_pp0_iter39_reg;
        icmp_ln157_reg_1407_pp0_iter41_reg <= icmp_ln157_reg_1407_pp0_iter40_reg;
        icmp_ln157_reg_1407_pp0_iter42_reg <= icmp_ln157_reg_1407_pp0_iter41_reg;
        icmp_ln157_reg_1407_pp0_iter43_reg <= icmp_ln157_reg_1407_pp0_iter42_reg;
        icmp_ln157_reg_1407_pp0_iter44_reg <= icmp_ln157_reg_1407_pp0_iter43_reg;
        icmp_ln157_reg_1407_pp0_iter45_reg <= icmp_ln157_reg_1407_pp0_iter44_reg;
        icmp_ln157_reg_1407_pp0_iter46_reg <= icmp_ln157_reg_1407_pp0_iter45_reg;
        icmp_ln157_reg_1407_pp0_iter47_reg <= icmp_ln157_reg_1407_pp0_iter46_reg;
        icmp_ln157_reg_1407_pp0_iter48_reg <= icmp_ln157_reg_1407_pp0_iter47_reg;
        icmp_ln157_reg_1407_pp0_iter49_reg <= icmp_ln157_reg_1407_pp0_iter48_reg;
        icmp_ln157_reg_1407_pp0_iter4_reg <= icmp_ln157_reg_1407_pp0_iter3_reg;
        icmp_ln157_reg_1407_pp0_iter50_reg <= icmp_ln157_reg_1407_pp0_iter49_reg;
        icmp_ln157_reg_1407_pp0_iter51_reg <= icmp_ln157_reg_1407_pp0_iter50_reg;
        icmp_ln157_reg_1407_pp0_iter52_reg <= icmp_ln157_reg_1407_pp0_iter51_reg;
        icmp_ln157_reg_1407_pp0_iter53_reg <= icmp_ln157_reg_1407_pp0_iter52_reg;
        icmp_ln157_reg_1407_pp0_iter54_reg <= icmp_ln157_reg_1407_pp0_iter53_reg;
        icmp_ln157_reg_1407_pp0_iter55_reg <= icmp_ln157_reg_1407_pp0_iter54_reg;
        icmp_ln157_reg_1407_pp0_iter56_reg <= icmp_ln157_reg_1407_pp0_iter55_reg;
        icmp_ln157_reg_1407_pp0_iter57_reg <= icmp_ln157_reg_1407_pp0_iter56_reg;
        icmp_ln157_reg_1407_pp0_iter58_reg <= icmp_ln157_reg_1407_pp0_iter57_reg;
        icmp_ln157_reg_1407_pp0_iter59_reg <= icmp_ln157_reg_1407_pp0_iter58_reg;
        icmp_ln157_reg_1407_pp0_iter5_reg <= icmp_ln157_reg_1407_pp0_iter4_reg;
        icmp_ln157_reg_1407_pp0_iter60_reg <= icmp_ln157_reg_1407_pp0_iter59_reg;
        icmp_ln157_reg_1407_pp0_iter61_reg <= icmp_ln157_reg_1407_pp0_iter60_reg;
        icmp_ln157_reg_1407_pp0_iter62_reg <= icmp_ln157_reg_1407_pp0_iter61_reg;
        icmp_ln157_reg_1407_pp0_iter63_reg <= icmp_ln157_reg_1407_pp0_iter62_reg;
        icmp_ln157_reg_1407_pp0_iter64_reg <= icmp_ln157_reg_1407_pp0_iter63_reg;
        icmp_ln157_reg_1407_pp0_iter65_reg <= icmp_ln157_reg_1407_pp0_iter64_reg;
        icmp_ln157_reg_1407_pp0_iter66_reg <= icmp_ln157_reg_1407_pp0_iter65_reg;
        icmp_ln157_reg_1407_pp0_iter67_reg <= icmp_ln157_reg_1407_pp0_iter66_reg;
        icmp_ln157_reg_1407_pp0_iter68_reg <= icmp_ln157_reg_1407_pp0_iter67_reg;
        icmp_ln157_reg_1407_pp0_iter69_reg <= icmp_ln157_reg_1407_pp0_iter68_reg;
        icmp_ln157_reg_1407_pp0_iter6_reg <= icmp_ln157_reg_1407_pp0_iter5_reg;
        icmp_ln157_reg_1407_pp0_iter70_reg <= icmp_ln157_reg_1407_pp0_iter69_reg;
        icmp_ln157_reg_1407_pp0_iter71_reg <= icmp_ln157_reg_1407_pp0_iter70_reg;
        icmp_ln157_reg_1407_pp0_iter7_reg <= icmp_ln157_reg_1407_pp0_iter6_reg;
        icmp_ln157_reg_1407_pp0_iter8_reg <= icmp_ln157_reg_1407_pp0_iter7_reg;
        icmp_ln157_reg_1407_pp0_iter9_reg <= icmp_ln157_reg_1407_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln174_1_reg_1417_pp0_iter1_reg <= add_ln174_1_reg_1417;
        icmp_ln157_reg_1407 <= icmp_ln157_fu_492_p2;
        icmp_ln157_reg_1407_pp0_iter1_reg <= icmp_ln157_reg_1407;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln209_fu_905_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln190_reg_1532 <= add_ln190_fu_914_p2;
        add_ln216_3_reg_1538 <= add_ln216_3_fu_919_p2;
        add_ln216_4_reg_1555 <= add_ln216_4_fu_954_p2;
        gmem_addr_3_reg_1549 <= sext_ln216_fu_944_p1;
        shl_ln216_3_reg_1560 <= shl_ln216_3_fu_964_p2;
        shl_ln216_reg_1544 <= shl_ln216_fu_928_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln209_reg_1528 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        add_ln216_2_reg_1597 <= add_ln216_2_fu_1060_p2;
        i_6_reg_1612 <= i_6_fu_1129_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state310) & (icmp_ln218_fu_1207_p2 == 1'd0))) begin
        add_ln223_1_reg_1621 <= add_ln223_1_fu_1221_p2;
        gmem_addr_6_reg_1628 <= sext_ln223_fu_1236_p1;
        gmem_addr_7_reg_1634 <= sext_ln223_1_fu_1262_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        conv1_i_i_reg_1476 <= grp_fu_449_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        conv_i_reg_1446 <= grp_fu_469_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        dc_reg_1456 <= grp_fu_452_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        div_i_reg_1451 <= grp_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln209_reg_1528 == 1'd1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        gmem_addr_4_reg_1575 <= sext_ln216_1_fu_1010_p1;
        gmem_addr_5_reg_1591 <= sext_ln216_2_fu_1050_p1;
        shl_ln216_2_reg_1570 <= shl_ln216_2_fu_989_p2;
        shl_ln216_6_reg_1586 <= shl_ln216_6_fu_1034_p2;
        trunc_ln192_reg_1565 <= trunc_ln192_fu_970_p1;
        xor_ln216_reg_1581 <= xor_ln216_fu_1025_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln157_reg_1407_pp0_iter70_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_read_reg_1422 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state165)) begin
        header_reg_1498[31 : 1] <= header_fu_816_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        icmp_ln174_2_reg_1482 <= icmp_ln174_2_fu_768_p2;
        icmp_ln174_3_reg_1487 <= icmp_ln174_3_fu_774_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln209_reg_1528 <= icmp_ln209_fu_905_p2;
        icmp_ln209_reg_1528_pp2_iter10_reg <= icmp_ln209_reg_1528_pp2_iter9_reg;
        icmp_ln209_reg_1528_pp2_iter11_reg <= icmp_ln209_reg_1528_pp2_iter10_reg;
        icmp_ln209_reg_1528_pp2_iter12_reg <= icmp_ln209_reg_1528_pp2_iter11_reg;
        icmp_ln209_reg_1528_pp2_iter13_reg <= icmp_ln209_reg_1528_pp2_iter12_reg;
        icmp_ln209_reg_1528_pp2_iter14_reg <= icmp_ln209_reg_1528_pp2_iter13_reg;
        icmp_ln209_reg_1528_pp2_iter15_reg <= icmp_ln209_reg_1528_pp2_iter14_reg;
        icmp_ln209_reg_1528_pp2_iter16_reg <= icmp_ln209_reg_1528_pp2_iter15_reg;
        icmp_ln209_reg_1528_pp2_iter17_reg <= icmp_ln209_reg_1528_pp2_iter16_reg;
        icmp_ln209_reg_1528_pp2_iter18_reg <= icmp_ln209_reg_1528_pp2_iter17_reg;
        icmp_ln209_reg_1528_pp2_iter19_reg <= icmp_ln209_reg_1528_pp2_iter18_reg;
        icmp_ln209_reg_1528_pp2_iter1_reg <= icmp_ln209_reg_1528;
        icmp_ln209_reg_1528_pp2_iter20_reg <= icmp_ln209_reg_1528_pp2_iter19_reg;
        icmp_ln209_reg_1528_pp2_iter21_reg <= icmp_ln209_reg_1528_pp2_iter20_reg;
        icmp_ln209_reg_1528_pp2_iter22_reg <= icmp_ln209_reg_1528_pp2_iter21_reg;
        icmp_ln209_reg_1528_pp2_iter23_reg <= icmp_ln209_reg_1528_pp2_iter22_reg;
        icmp_ln209_reg_1528_pp2_iter2_reg <= icmp_ln209_reg_1528_pp2_iter1_reg;
        icmp_ln209_reg_1528_pp2_iter3_reg <= icmp_ln209_reg_1528_pp2_iter2_reg;
        icmp_ln209_reg_1528_pp2_iter4_reg <= icmp_ln209_reg_1528_pp2_iter3_reg;
        icmp_ln209_reg_1528_pp2_iter5_reg <= icmp_ln209_reg_1528_pp2_iter4_reg;
        icmp_ln209_reg_1528_pp2_iter6_reg <= icmp_ln209_reg_1528_pp2_iter5_reg;
        icmp_ln209_reg_1528_pp2_iter7_reg <= icmp_ln209_reg_1528_pp2_iter6_reg;
        icmp_ln209_reg_1528_pp2_iter8_reg <= icmp_ln209_reg_1528_pp2_iter7_reg;
        icmp_ln209_reg_1528_pp2_iter9_reg <= icmp_ln209_reg_1528_pp2_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state310)) begin
        icmp_ln218_reg_1617 <= icmp_ln218_fu_1207_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        or_ln174_reg_1470 <= or_ln174_fu_745_p2;
        result_V_reg_1463 <= result_V_fu_725_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        select_ln174_reg_1492 <= select_ln174_fu_809_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln209_reg_1528 == 1'd1) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        shl_ln216_5_reg_1602 <= shl_ln216_5_fu_1102_p2;
        shl_ln216_8_reg_1607 <= shl_ln216_8_fu_1123_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state311)) begin
        shl_ln223_2_reg_1650 <= shl_ln223_2_fu_1300_p2;
        shl_ln223_reg_1645 <= shl_ln223_fu_1283_p2;
        trunc_ln222_reg_1640 <= trunc_ln222_fu_1272_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state312)) begin
        shl_ln223_3_reg_1655 <= shl_ln223_3_fu_1326_p2;
        shl_ln223_5_reg_1660 <= shl_ln223_5_fu_1344_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        tmp_14_reg_1433 <= cmprs_len_stream_dout;
        total_bits_reg_1441[31 : 2] <= total_bits_fu_588_p2[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln174_reg_1397 <= trunc_ln174_fu_482_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state236)) begin
        trunc_ln190_reg_1522 <= trunc_ln190_fu_896_p1;
    end
end

always @ (*) begin
    if ((icmp_ln157_fu_492_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln209_fu_905_p2 == 1'd0)) begin
        ap_condition_pp2_exit_iter0_state237 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state237 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((icmp_ln218_reg_1617 == 1'd0) & (m_axi_gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state381)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter72 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter68 == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0) & (ap_enable_reg_pp0_iter66 == 1'b0) & (ap_enable_reg_pp0_iter65 == 1'b0) & (ap_enable_reg_pp0_iter64 == 1'b0) & (ap_enable_reg_pp0_iter63 == 1'b0) & (ap_enable_reg_pp0_iter62 == 1'b0) & (ap_enable_reg_pp0_iter61 == 1'b0) & (ap_enable_reg_pp0_iter60 == 1'b0) & (ap_enable_reg_pp0_iter59 == 1'b0) & (ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter24 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter23 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter22 == 1'b0) & (ap_enable_reg_pp2_iter21 == 1'b0) & (ap_enable_reg_pp2_iter20 == 1'b0) & (ap_enable_reg_pp2_iter19 == 1'b0) & (ap_enable_reg_pp2_iter18 == 1'b0) & (ap_enable_reg_pp2_iter17 == 1'b0) & (ap_enable_reg_pp2_iter16 == 1'b0) & (ap_enable_reg_pp2_iter15 == 1'b0) & (ap_enable_reg_pp2_iter14 == 1'b0) & (ap_enable_reg_pp2_iter13 == 1'b0) & (ap_enable_reg_pp2_iter12 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln209_reg_1528 == 1'd1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_i_5_phi_fu_422_p4 = i_6_reg_1612;
    end else begin
        ap_phi_mux_i_5_phi_fu_422_p4 = i_5_reg_418;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln209_reg_1528 == 1'd1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_j_phi_fu_410_p4 = add_ln216_2_reg_1597;
    end else begin
        ap_phi_mux_j_phi_fu_410_p4 = j_reg_406;
    end
end

always @ (*) begin
    if ((~((icmp_ln218_reg_1617 == 1'd0) & (m_axi_gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state381))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        chr_stream_read = grp_compute_lzw_fu_430_chr_stream1_read;
    end else begin
        chr_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter72 == 1'b1) & (icmp_ln157_reg_1407_pp0_iter71_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        chr_stream_write = 1'b1;
    end else begin
        chr_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) & (cmprs_len_stream_empty_n == 1'b1))) begin
        cmprs_len_stream_read = 1'b1;
    end else begin
        cmprs_len_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        cmprs_len_stream_write = grp_compute_lzw_fu_430_cmprs_len_stream3_write;
    end else begin
        cmprs_len_stream_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln209_reg_1528 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((icmp_ln209_reg_1528 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | (~((m_axi_gmem_AWREADY == 1'b0) | (cmprs_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state311)))) begin
        cmprs_stream_read = 1'b1;
    end else begin
        cmprs_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        cmprs_stream_write = grp_compute_lzw_fu_430_cmprs_stream2_write;
    end else begin
        cmprs_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln157_reg_1407 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state312) | (1'b1 == ap_CS_fsm_state311) | (1'b1 == ap_CS_fsm_state167) | (1'b1 == ap_CS_fsm_state75) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln209_reg_1528 == 1'd1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln209_reg_1528 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((icmp_ln209_reg_1528 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state380) | (1'b1 == ap_CS_fsm_state236) | (1'b1 == ap_CS_fsm_state165) | ((icmp_ln218_reg_1617 == 1'd0) & (1'b1 == ap_CS_fsm_state381)) | ((ap_enable_reg_pp2_iter24 == 1'b1) & (icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (ap_enable_reg_pp2_iter23 == 1'b1) & (1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (ap_enable_reg_pp2_iter23 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln157_reg_1407_pp0_iter70_reg == 1'd0) & (ap_enable_reg_pp0_iter71 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state313) | (1'b1 == ap_CS_fsm_state312) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state97) | ((icmp_ln209_reg_1528_pp2_iter1_reg == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln209_reg_1528 == 1'd1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln209_reg_1528 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2)))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln157_reg_1407 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state312_io) & (1'b1 == ap_CS_fsm_state312))) begin
        m_axi_gmem_AWADDR = gmem_addr_7_reg_1634;
    end else if ((~((m_axi_gmem_AWREADY == 1'b0) | (cmprs_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state311))) begin
        m_axi_gmem_AWADDR = gmem_addr_6_reg_1628;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln209_reg_1528 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        m_axi_gmem_AWADDR = gmem_addr_5_reg_1591;
    end else if (((icmp_ln209_reg_1528 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        m_axi_gmem_AWADDR = gmem_addr_4_reg_1575;
    end else if (((icmp_ln209_reg_1528 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        m_axi_gmem_AWADDR = gmem_addr_3_reg_1549;
    end else if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state167))) begin
        m_axi_gmem_AWADDR = sext_ln207_fu_885_p1;
    end else if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
        m_axi_gmem_AWADDR = sext_ln202_fu_565_p1;
    end else begin
        m_axi_gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln209_reg_1528 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln209_reg_1528 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((icmp_ln209_reg_1528 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_state312_io) & (1'b1 == ap_CS_fsm_state312)) | (~((m_axi_gmem_AWREADY == 1'b0) | (cmprs_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state311)) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state167)) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state75)))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter24 == 1'b1) & (icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (ap_enable_reg_pp2_iter23 == 1'b1) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (ap_enable_reg_pp2_iter23 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | (~((icmp_ln218_reg_1617 == 1'd0) & (m_axi_gmem_BVALID == 1'b0)) & (icmp_ln218_reg_1617 == 1'd0) & (1'b1 == ap_CS_fsm_state381)) | ((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state380)) | ((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state236)) | ((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state165)))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln157_reg_1407_pp0_iter70_reg == 1'd0) & (ap_enable_reg_pp0_iter71 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state313)) begin
        m_axi_gmem_WDATA = shl_ln223_5_reg_1660;
    end else if ((1'b1 == ap_CS_fsm_state312)) begin
        m_axi_gmem_WDATA = shl_ln223_2_reg_1650;
    end else if (((icmp_ln209_reg_1528_pp2_iter1_reg == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_01001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        m_axi_gmem_WDATA = shl_ln216_8_reg_1607;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln209_reg_1528 == 1'd1) & (1'b0 == ap_block_pp2_stage0_01001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        m_axi_gmem_WDATA = shl_ln216_5_reg_1602;
    end else if (((icmp_ln209_reg_1528 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_01001) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        m_axi_gmem_WDATA = shl_ln216_2_reg_1570;
    end else if ((1'b1 == ap_CS_fsm_state168)) begin
        m_axi_gmem_WDATA = shiftreg_reg_393;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        m_axi_gmem_WDATA = select_ln174_reg_1492;
    end else begin
        m_axi_gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state313)) begin
        m_axi_gmem_WSTRB = shl_ln223_3_reg_1655;
    end else if ((1'b1 == ap_CS_fsm_state312)) begin
        m_axi_gmem_WSTRB = shl_ln223_reg_1645;
    end else if (((icmp_ln209_reg_1528_pp2_iter1_reg == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_01001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        m_axi_gmem_WSTRB = shl_ln216_6_reg_1586;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln209_reg_1528 == 1'd1) & (1'b0 == ap_block_pp2_stage0_01001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        m_axi_gmem_WSTRB = shl_ln216_3_reg_1560;
    end else if (((icmp_ln209_reg_1528 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_01001) & (1'b1 == ap_CS_fsm_pp2_stage2))) begin
        m_axi_gmem_WSTRB = shl_ln216_reg_1544;
    end else if (((1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state97))) begin
        m_axi_gmem_WSTRB = 4'd15;
    end else begin
        m_axi_gmem_WSTRB = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln209_reg_1528_pp2_iter1_reg == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln209_reg_1528 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln209_reg_1528 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2)) | ((1'b0 == ap_block_state312_io) & (1'b1 == ap_CS_fsm_state312)) | ((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state313)) | ((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state168)) | ((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state97)))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln157_fu_492_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter72 == 1'b1) & (ap_enable_reg_pp0_iter71 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter72 == 1'b1) & (ap_enable_reg_pp0_iter71 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln157_fu_492_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((1'b1 == ap_CS_fsm_state76) & (grp_compute_lzw_fu_430_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((1'b1 == ap_CS_fsm_state77) & (cmprs_len_stream_empty_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state165))) begin
                ap_NS_fsm = ap_ST_fsm_state166;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state165;
            end
        end
        ap_ST_fsm_state166 : begin
            if (((icmp_ln184_fu_827_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state166))) begin
                ap_NS_fsm = ap_ST_fsm_state166;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state167;
            end
        end
        ap_ST_fsm_state167 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state167))) begin
                ap_NS_fsm = ap_ST_fsm_state168;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state167;
            end
        end
        ap_ST_fsm_state168 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state168))) begin
                ap_NS_fsm = ap_ST_fsm_state169;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state168;
            end
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state209;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state232;
        end
        ap_ST_fsm_state232 : begin
            ap_NS_fsm = ap_ST_fsm_state233;
        end
        ap_ST_fsm_state233 : begin
            ap_NS_fsm = ap_ST_fsm_state234;
        end
        ap_ST_fsm_state234 : begin
            ap_NS_fsm = ap_ST_fsm_state235;
        end
        ap_ST_fsm_state235 : begin
            ap_NS_fsm = ap_ST_fsm_state236;
        end
        ap_ST_fsm_state236 : begin
            if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state236))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state236;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln209_fu_905_p2 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter24 == 1'b1) & (ap_enable_reg_pp2_iter23 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if ((((ap_enable_reg_pp2_iter24 == 1'b1) & (ap_enable_reg_pp2_iter23 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln209_fu_905_p2 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state310;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((1'b0 == ap_block_pp2_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_state310 : begin
            if (((1'b1 == ap_CS_fsm_state310) & (icmp_ln218_fu_1207_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state381;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state311;
            end
        end
        ap_ST_fsm_state311 : begin
            if ((~((m_axi_gmem_AWREADY == 1'b0) | (cmprs_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state311))) begin
                ap_NS_fsm = ap_ST_fsm_state312;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state311;
            end
        end
        ap_ST_fsm_state312 : begin
            if (((1'b0 == ap_block_state312_io) & (1'b1 == ap_CS_fsm_state312))) begin
                ap_NS_fsm = ap_ST_fsm_state313;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state312;
            end
        end
        ap_ST_fsm_state313 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state313))) begin
                ap_NS_fsm = ap_ST_fsm_state314;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state313;
            end
        end
        ap_ST_fsm_state314 : begin
            ap_NS_fsm = ap_ST_fsm_state315;
        end
        ap_ST_fsm_state315 : begin
            ap_NS_fsm = ap_ST_fsm_state316;
        end
        ap_ST_fsm_state316 : begin
            ap_NS_fsm = ap_ST_fsm_state317;
        end
        ap_ST_fsm_state317 : begin
            ap_NS_fsm = ap_ST_fsm_state318;
        end
        ap_ST_fsm_state318 : begin
            ap_NS_fsm = ap_ST_fsm_state319;
        end
        ap_ST_fsm_state319 : begin
            ap_NS_fsm = ap_ST_fsm_state320;
        end
        ap_ST_fsm_state320 : begin
            ap_NS_fsm = ap_ST_fsm_state321;
        end
        ap_ST_fsm_state321 : begin
            ap_NS_fsm = ap_ST_fsm_state322;
        end
        ap_ST_fsm_state322 : begin
            ap_NS_fsm = ap_ST_fsm_state323;
        end
        ap_ST_fsm_state323 : begin
            ap_NS_fsm = ap_ST_fsm_state324;
        end
        ap_ST_fsm_state324 : begin
            ap_NS_fsm = ap_ST_fsm_state325;
        end
        ap_ST_fsm_state325 : begin
            ap_NS_fsm = ap_ST_fsm_state326;
        end
        ap_ST_fsm_state326 : begin
            ap_NS_fsm = ap_ST_fsm_state327;
        end
        ap_ST_fsm_state327 : begin
            ap_NS_fsm = ap_ST_fsm_state328;
        end
        ap_ST_fsm_state328 : begin
            ap_NS_fsm = ap_ST_fsm_state329;
        end
        ap_ST_fsm_state329 : begin
            ap_NS_fsm = ap_ST_fsm_state330;
        end
        ap_ST_fsm_state330 : begin
            ap_NS_fsm = ap_ST_fsm_state331;
        end
        ap_ST_fsm_state331 : begin
            ap_NS_fsm = ap_ST_fsm_state332;
        end
        ap_ST_fsm_state332 : begin
            ap_NS_fsm = ap_ST_fsm_state333;
        end
        ap_ST_fsm_state333 : begin
            ap_NS_fsm = ap_ST_fsm_state334;
        end
        ap_ST_fsm_state334 : begin
            ap_NS_fsm = ap_ST_fsm_state335;
        end
        ap_ST_fsm_state335 : begin
            ap_NS_fsm = ap_ST_fsm_state336;
        end
        ap_ST_fsm_state336 : begin
            ap_NS_fsm = ap_ST_fsm_state337;
        end
        ap_ST_fsm_state337 : begin
            ap_NS_fsm = ap_ST_fsm_state338;
        end
        ap_ST_fsm_state338 : begin
            ap_NS_fsm = ap_ST_fsm_state339;
        end
        ap_ST_fsm_state339 : begin
            ap_NS_fsm = ap_ST_fsm_state340;
        end
        ap_ST_fsm_state340 : begin
            ap_NS_fsm = ap_ST_fsm_state341;
        end
        ap_ST_fsm_state341 : begin
            ap_NS_fsm = ap_ST_fsm_state342;
        end
        ap_ST_fsm_state342 : begin
            ap_NS_fsm = ap_ST_fsm_state343;
        end
        ap_ST_fsm_state343 : begin
            ap_NS_fsm = ap_ST_fsm_state344;
        end
        ap_ST_fsm_state344 : begin
            ap_NS_fsm = ap_ST_fsm_state345;
        end
        ap_ST_fsm_state345 : begin
            ap_NS_fsm = ap_ST_fsm_state346;
        end
        ap_ST_fsm_state346 : begin
            ap_NS_fsm = ap_ST_fsm_state347;
        end
        ap_ST_fsm_state347 : begin
            ap_NS_fsm = ap_ST_fsm_state348;
        end
        ap_ST_fsm_state348 : begin
            ap_NS_fsm = ap_ST_fsm_state349;
        end
        ap_ST_fsm_state349 : begin
            ap_NS_fsm = ap_ST_fsm_state350;
        end
        ap_ST_fsm_state350 : begin
            ap_NS_fsm = ap_ST_fsm_state351;
        end
        ap_ST_fsm_state351 : begin
            ap_NS_fsm = ap_ST_fsm_state352;
        end
        ap_ST_fsm_state352 : begin
            ap_NS_fsm = ap_ST_fsm_state353;
        end
        ap_ST_fsm_state353 : begin
            ap_NS_fsm = ap_ST_fsm_state354;
        end
        ap_ST_fsm_state354 : begin
            ap_NS_fsm = ap_ST_fsm_state355;
        end
        ap_ST_fsm_state355 : begin
            ap_NS_fsm = ap_ST_fsm_state356;
        end
        ap_ST_fsm_state356 : begin
            ap_NS_fsm = ap_ST_fsm_state357;
        end
        ap_ST_fsm_state357 : begin
            ap_NS_fsm = ap_ST_fsm_state358;
        end
        ap_ST_fsm_state358 : begin
            ap_NS_fsm = ap_ST_fsm_state359;
        end
        ap_ST_fsm_state359 : begin
            ap_NS_fsm = ap_ST_fsm_state360;
        end
        ap_ST_fsm_state360 : begin
            ap_NS_fsm = ap_ST_fsm_state361;
        end
        ap_ST_fsm_state361 : begin
            ap_NS_fsm = ap_ST_fsm_state362;
        end
        ap_ST_fsm_state362 : begin
            ap_NS_fsm = ap_ST_fsm_state363;
        end
        ap_ST_fsm_state363 : begin
            ap_NS_fsm = ap_ST_fsm_state364;
        end
        ap_ST_fsm_state364 : begin
            ap_NS_fsm = ap_ST_fsm_state365;
        end
        ap_ST_fsm_state365 : begin
            ap_NS_fsm = ap_ST_fsm_state366;
        end
        ap_ST_fsm_state366 : begin
            ap_NS_fsm = ap_ST_fsm_state367;
        end
        ap_ST_fsm_state367 : begin
            ap_NS_fsm = ap_ST_fsm_state368;
        end
        ap_ST_fsm_state368 : begin
            ap_NS_fsm = ap_ST_fsm_state369;
        end
        ap_ST_fsm_state369 : begin
            ap_NS_fsm = ap_ST_fsm_state370;
        end
        ap_ST_fsm_state370 : begin
            ap_NS_fsm = ap_ST_fsm_state371;
        end
        ap_ST_fsm_state371 : begin
            ap_NS_fsm = ap_ST_fsm_state372;
        end
        ap_ST_fsm_state372 : begin
            ap_NS_fsm = ap_ST_fsm_state373;
        end
        ap_ST_fsm_state373 : begin
            ap_NS_fsm = ap_ST_fsm_state374;
        end
        ap_ST_fsm_state374 : begin
            ap_NS_fsm = ap_ST_fsm_state375;
        end
        ap_ST_fsm_state375 : begin
            ap_NS_fsm = ap_ST_fsm_state376;
        end
        ap_ST_fsm_state376 : begin
            ap_NS_fsm = ap_ST_fsm_state377;
        end
        ap_ST_fsm_state377 : begin
            ap_NS_fsm = ap_ST_fsm_state378;
        end
        ap_ST_fsm_state378 : begin
            ap_NS_fsm = ap_ST_fsm_state379;
        end
        ap_ST_fsm_state379 : begin
            ap_NS_fsm = ap_ST_fsm_state380;
        end
        ap_ST_fsm_state380 : begin
            if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state380))) begin
                ap_NS_fsm = ap_ST_fsm_state381;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state380;
            end
        end
        ap_ST_fsm_state381 : begin
            if ((~((icmp_ln218_reg_1617 == 1'd0) & (m_axi_gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state381))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state381;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln157_fu_486_p2 = (i_reg_371 + 32'd1);

assign add_ln174_1_fu_530_p2 = (trunc_ln174_2_fu_501_p1 + trunc_ln174_reg_1397);

assign add_ln174_fu_505_p2 = (i_cast_fu_497_p1 + s1);

assign add_ln177_fu_804_p2 = (result_V_reg_1463 + zext_ln177_fu_800_p1);

assign add_ln184_fu_821_p2 = (i_4_reg_382 + 3'd1);

assign add_ln190_fu_914_p2 = (ap_phi_mux_j_phi_fu_410_p4 + file_buffer);

assign add_ln216_1_fu_1020_p2 = (add_ln190_reg_1532 + 64'd2);

assign add_ln216_2_fu_1060_p2 = (j_reg_406 + 64'd3);

assign add_ln216_3_fu_919_p2 = (trunc_ln190_1_fu_910_p1 + trunc_ln190_reg_1522);

assign add_ln216_4_fu_954_p2 = (add_ln216_3_fu_919_p2 + 2'd1);

assign add_ln216_fu_995_p2 = (add_ln190_reg_1532 + 64'd1);

assign add_ln218_fu_1201_p2 = (sub_ln218_fu_1179_p2 + 32'd4);

assign add_ln221_fu_1216_p2 = ($signed(sext_ln221_fu_1212_p1) + $signed(file_buffer));

assign add_ln223_1_fu_1221_p2 = (trunc_ln218_fu_1197_p1 + trunc_ln190_reg_1522);

assign add_ln223_2_fu_1317_p2 = (add_ln223_1_reg_1621 + 2'd1);

assign add_ln223_fu_1246_p2 = (add_ln221_fu_1216_p2 + 64'd1);

assign add_ln341_fu_637_p2 = ($signed(zext_ln341_fu_633_p1) + $signed(9'd385));

assign and_ln174_1_fu_789_p2 = (grp_fu_455_p2 & and_ln174_fu_784_p2);

assign and_ln174_fu_784_p2 = (or_ln174_reg_1470 & or_ln174_1_fu_780_p2);

assign and_ln177_fu_795_p2 = (or_ln174_reg_1470 & grp_fu_459_p2);

assign and_ln1_fu_1185_p3 = {{select_ln209_fu_1159_p3}, {1'd0}};

assign and_ln_fu_1171_p3 = {{select_ln209_fu_1159_p3}, {2'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd164];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd165];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[32'd166];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state165 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state166 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state167 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state168 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state236 = ap_CS_fsm[32'd163];

assign ap_CS_fsm_state310 = ap_CS_fsm[32'd167];

assign ap_CS_fsm_state311 = ap_CS_fsm[32'd168];

assign ap_CS_fsm_state312 = ap_CS_fsm[32'd169];

assign ap_CS_fsm_state313 = ap_CS_fsm[32'd170];

assign ap_CS_fsm_state380 = ap_CS_fsm[32'd237];

assign ap_CS_fsm_state381 = ap_CS_fsm[32'd238];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd24];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter72 == 1'b1) & (icmp_ln157_reg_1407_pp0_iter71_reg == 1'd0) & (chr_stream_full_n == 1'b0)) | ((icmp_ln157_reg_1407_pp0_iter70_reg == 1'd0) & (ap_enable_reg_pp0_iter71 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter72 == 1'b1) & (icmp_ln157_reg_1407_pp0_iter71_reg == 1'd0) & (chr_stream_full_n == 1'b0)) | ((icmp_ln157_reg_1407_pp0_iter70_reg == 1'd0) & (ap_enable_reg_pp0_iter71 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter72 == 1'b1) & (icmp_ln157_reg_1407_pp0_iter71_reg == 1'd0) & (chr_stream_full_n == 1'b0)) | ((icmp_ln157_reg_1407_pp0_iter70_reg == 1'd0) & (ap_enable_reg_pp0_iter71 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = ((ap_enable_reg_pp2_iter24 == 1'b1) & (icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (m_axi_gmem_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((ap_enable_reg_pp2_iter24 == 1'b1) & (icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (m_axi_gmem_BVALID == 1'b0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_block_state240_io)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((ap_enable_reg_pp2_iter24 == 1'b1) & (icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (m_axi_gmem_BVALID == 1'b0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_block_state240_io)));
end

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage1_01001 = (((icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (ap_enable_reg_pp2_iter23 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((icmp_ln209_reg_1528 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (cmprs_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp2_stage1_11001 = (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_block_state241_io)) | ((icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (ap_enable_reg_pp2_iter23 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state238_io) | ((icmp_ln209_reg_1528 == 1'd1) & (cmprs_stream_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp2_stage1_subdone = (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_block_state241_io)) | ((icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (ap_enable_reg_pp2_iter23 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state238_io) | ((icmp_ln209_reg_1528 == 1'd1) & (cmprs_stream_empty_n == 1'b0)))));
end

assign ap_block_pp2_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage2_01001 = (((icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (ap_enable_reg_pp2_iter23 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((icmp_ln209_reg_1528 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (cmprs_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp2_stage2_11001 = (((icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (ap_enable_reg_pp2_iter23 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state239_io) | ((icmp_ln209_reg_1528 == 1'd1) & (cmprs_stream_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp2_stage2_subdone = (((icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (ap_enable_reg_pp2_iter23 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & ((1'b1 == ap_block_state239_io) | ((icmp_ln209_reg_1528 == 1'd1) & (cmprs_stream_empty_n == 1'b0)))));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state237_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state238_io = ((icmp_ln209_reg_1528 == 1'd1) & (m_axi_gmem_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state238_pp2_stage1_iter0 = ((icmp_ln209_reg_1528 == 1'd1) & (cmprs_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state239_io = (((icmp_ln209_reg_1528 == 1'd1) & (m_axi_gmem_AWREADY == 1'b0)) | ((icmp_ln209_reg_1528 == 1'd1) & (m_axi_gmem_WREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state239_pp2_stage2_iter0 = ((icmp_ln209_reg_1528 == 1'd1) & (cmprs_stream_empty_n == 1'b0));
end

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state240_io = (((icmp_ln209_reg_1528 == 1'd1) & (m_axi_gmem_AWREADY == 1'b0)) | ((icmp_ln209_reg_1528 == 1'd1) & (m_axi_gmem_WREADY == 1'b0)));
end

assign ap_block_state240_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state241_io = ((icmp_ln209_reg_1528_pp2_iter1_reg == 1'd1) & (m_axi_gmem_WREADY == 1'b0));
end

assign ap_block_state241_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state242_pp2_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state243_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state244_pp2_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state245_pp2_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state246_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state247_pp2_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state248_pp2_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state249_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state250_pp2_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state251_pp2_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state252_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state253_pp2_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state254_pp2_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state255_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state256_pp2_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state257_pp2_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state258_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state259_pp2_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state260_pp2_stage2_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state261_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state262_pp2_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state263_pp2_stage2_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state264_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state265_pp2_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state266_pp2_stage2_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state267_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state268_pp2_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state269_pp2_stage2_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state270_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state271_pp2_stage1_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state272_pp2_stage2_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state273_pp2_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state274_pp2_stage1_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state275_pp2_stage2_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state276_pp2_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state277_pp2_stage1_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state278_pp2_stage2_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state279_pp2_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state280_pp2_stage1_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state281_pp2_stage2_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state282_pp2_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state283_pp2_stage1_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state284_pp2_stage2_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state285_pp2_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state286_pp2_stage1_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state287_pp2_stage2_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state288_pp2_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state289_pp2_stage1_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state290_pp2_stage2_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state291_pp2_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state292_pp2_stage1_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state293_pp2_stage2_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state294_pp2_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state295_pp2_stage1_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state296_pp2_stage2_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state297_pp2_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state298_pp2_stage1_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state299_pp2_stage2_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state300_pp2_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state301_pp2_stage1_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state302_pp2_stage2_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state303_pp2_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state304_pp2_stage1_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state305_pp2_stage2_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state306_pp2_stage0_iter23 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state307_pp2_stage1_iter23 = ((icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (m_axi_gmem_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state308_pp2_stage2_iter23 = ((icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (m_axi_gmem_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state309_pp2_stage0_iter24 = ((icmp_ln209_reg_1528_pp2_iter23_reg == 1'd1) & (m_axi_gmem_BVALID == 1'b0));
end

assign ap_block_state30_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state312_io = ((m_axi_gmem_WREADY == 1'b0) | (m_axi_gmem_AWREADY == 1'b0));
end

assign ap_block_state31_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state381 = ((icmp_ln218_reg_1617 == 1'd0) & (m_axi_gmem_BVALID == 1'b0));
end

assign ap_block_state38_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((icmp_ln157_reg_1407 == 1'd0) & (m_axi_gmem_ARREADY == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter55 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter56 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter57 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter59 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter60 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter61 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter62 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter63 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter64 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage0_iter65 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter66 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage0_iter67 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage0_iter68 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter69 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage0_iter70 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state73_pp0_stage0_iter71 = ((icmp_ln157_reg_1407_pp0_iter70_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state74_pp0_stage0_iter72 = ((icmp_ln157_reg_1407_pp0_iter71_reg == 1'd0) & (chr_stream_full_n == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign bitcast_ln174_fu_751_p1 = conv1_i_i_reg_1476;

assign chr_stream_din = lshr_ln174_fu_546_p2[7:0];

assign data_V_fu_594_p1 = dc_reg_1456;

assign grp_compute_lzw_fu_430_ap_start = grp_compute_lzw_fu_430_ap_start_reg;

assign grp_fu_472_p4 = {{cmprs_stream_dout[11:4]}};

assign hash_table_address0 = grp_compute_lzw_fu_430_hash_table_address0;

assign hash_table_ce0 = grp_compute_lzw_fu_430_hash_table_ce0;

assign hash_table_d0 = grp_compute_lzw_fu_430_hash_table_d0;

assign hash_table_we0 = grp_compute_lzw_fu_430_hash_table_we0;

assign header_fu_816_p2 = select_ln174_reg_1492 << 32'd1;

assign i_6_fu_1129_p2 = (i_5_reg_418 + 32'd2);

assign i_cast_fu_497_p1 = i_reg_371;

assign icmp_ln157_fu_492_p2 = ((i_reg_371 == length_r) ? 1'b1 : 1'b0);

assign icmp_ln174_1_fu_739_p2 = ((tmp_16_fu_615_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln174_2_fu_768_p2 = ((tmp_1_fu_754_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln174_3_fu_774_p2 = ((trunc_ln174_1_fu_764_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln174_fu_733_p2 = ((tmp_15_fu_605_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln184_fu_827_p2 = ((i_4_reg_382 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln209_1_fu_1144_p2 = (($signed(tmp_11_fu_1135_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln209_fu_905_p2 = (($signed(or_ln209_fu_899_p2) < $signed(tmp_14_reg_1433)) ? 1'b1 : 1'b0);

assign icmp_ln218_fu_1207_p2 = ((zext_ln218_1_fu_1193_p1 == tmp_14_reg_1433) ? 1'b1 : 1'b0);

assign isNeg_fu_643_p3 = add_ln341_fu_637_p2[32'd8];

assign lshr_ln174_fu_546_p2 = gmem_addr_read_reg_1422 >> zext_ln174_fu_542_p1;

assign lshr_ln185_1_fu_858_p4 = {{shiftreg_reg_393[31:8]}};

assign lshr_ln185_fu_849_p2 = header_reg_1498 >> zext_ln185_fu_845_p1;

assign m_axi_gmem_ARADDR = gmem_addr_reg_1411;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WUSER = 1'd0;

assign mantissa_fu_619_p4 = {{{{1'd1}, {tmp_16_fu_615_p1}}}, {1'd0}};

assign my_assoc_mem_lower_key_mem_address0 = grp_compute_lzw_fu_430_my_assoc_mem_lower_key_mem_address0;

assign my_assoc_mem_lower_key_mem_ce0 = grp_compute_lzw_fu_430_my_assoc_mem_lower_key_mem_ce0;

assign my_assoc_mem_lower_key_mem_d0 = grp_compute_lzw_fu_430_my_assoc_mem_lower_key_mem_d0;

assign my_assoc_mem_lower_key_mem_we0 = grp_compute_lzw_fu_430_my_assoc_mem_lower_key_mem_we0;

assign my_assoc_mem_middle_key_mem_address0 = grp_compute_lzw_fu_430_my_assoc_mem_middle_key_mem_address0;

assign my_assoc_mem_middle_key_mem_ce0 = grp_compute_lzw_fu_430_my_assoc_mem_middle_key_mem_ce0;

assign my_assoc_mem_middle_key_mem_d0 = grp_compute_lzw_fu_430_my_assoc_mem_middle_key_mem_d0;

assign my_assoc_mem_middle_key_mem_we0 = grp_compute_lzw_fu_430_my_assoc_mem_middle_key_mem_we0;

assign my_assoc_mem_upper_key_mem_address0 = grp_compute_lzw_fu_430_my_assoc_mem_upper_key_mem_address0;

assign my_assoc_mem_upper_key_mem_ce0 = grp_compute_lzw_fu_430_my_assoc_mem_upper_key_mem_ce0;

assign my_assoc_mem_upper_key_mem_d0 = grp_compute_lzw_fu_430_my_assoc_mem_upper_key_mem_d0;

assign my_assoc_mem_upper_key_mem_we0 = grp_compute_lzw_fu_430_my_assoc_mem_upper_key_mem_we0;

assign my_assoc_mem_value_address0 = grp_compute_lzw_fu_430_my_assoc_mem_value_address0;

assign my_assoc_mem_value_ce0 = grp_compute_lzw_fu_430_my_assoc_mem_value_ce0;

assign my_assoc_mem_value_d0 = grp_compute_lzw_fu_430_my_assoc_mem_value_d0;

assign my_assoc_mem_value_we0 = grp_compute_lzw_fu_430_my_assoc_mem_value_we0;

assign or_ln174_1_fu_780_p2 = (icmp_ln174_3_reg_1487 | icmp_ln174_2_reg_1482);

assign or_ln174_fu_745_p2 = (icmp_ln174_fu_733_p2 | icmp_ln174_1_fu_739_p2);

assign or_ln209_fu_899_p2 = (ap_phi_mux_i_5_phi_fu_422_p4 | 32'd1);

assign or_ln2_fu_868_p3 = {{trunc_ln185_1_fu_854_p1}, {lshr_ln185_1_fu_858_p4}};

assign or_ln_fu_1076_p3 = {{trunc_ln192_reg_1565}, {trunc_ln192_1_fu_1066_p4}};

assign p_Result_s_fu_597_p3 = data_V_fu_594_p1[32'd31];

assign r_V_1_fu_683_p2 = zext_ln15_fu_629_p1 << sh_prom_i_i_i_i_i_i_i_cast_cast_cast_cast_fu_673_p1;

assign r_V_fu_677_p2 = zext_ln15_fu_629_p1 >> sh_prom_i_i_i_i_i_i_i_cast_cast_cast_cast_fu_673_p1;

assign result_V_2_fu_719_p2 = (32'd0 - val_fu_711_p3);

assign result_V_fu_725_p3 = ((p_Result_s_fu_597_p3[0:0] == 1'b1) ? result_V_2_fu_719_p2 : val_fu_711_p3);

assign select_ln174_fu_809_p3 = ((and_ln174_1_fu_789_p2[0:0] == 1'b1) ? result_V_reg_1463 : add_ln177_fu_804_p2);

assign select_ln209_fu_1159_p3 = ((icmp_ln209_1_fu_1144_p2[0:0] == 1'b1) ? tmp_12_fu_1150_p4 : 30'd0);

assign sext_ln1311_fu_657_p1 = $signed(sub_ln1311_fu_651_p2);

assign sext_ln174_fu_520_p1 = $signed(trunc_ln174_3_fu_510_p4);

assign sext_ln202_fu_565_p1 = $signed(trunc_ln6_fu_556_p4);

assign sext_ln207_fu_885_p1 = $signed(trunc_ln7_fu_876_p4);

assign sext_ln216_1_fu_1010_p1 = $signed(trunc_ln216_1_fu_1000_p4);

assign sext_ln216_2_fu_1050_p1 = $signed(trunc_ln216_2_fu_1040_p4);

assign sext_ln216_fu_944_p1 = $signed(trunc_ln_fu_934_p4);

assign sext_ln221_fu_1212_p1 = $signed(add_ln218_fu_1201_p2);

assign sext_ln223_1_fu_1262_p1 = $signed(trunc_ln223_1_fu_1252_p4);

assign sext_ln223_fu_1236_p1 = $signed(trunc_ln1_fu_1226_p4);

assign sh_prom_i_i_i_i_i_i_i_cast_cast_cast_cast_fu_673_p1 = $unsigned(sh_prom_i_i_i_i_i_i_i_cast_cast_cast_fu_669_p1);

assign sh_prom_i_i_i_i_i_i_i_cast_cast_cast_fu_669_p1 = $signed(ush_fu_661_p3);

assign shl_ln201_1_fu_582_p2 = cmprs_len_stream_dout << 32'd2;

assign shl_ln201_fu_576_p2 = cmprs_len_stream_dout << 32'd4;

assign shl_ln216_1_fu_978_p3 = {{add_ln216_3_reg_1538}, {3'd0}};

assign shl_ln216_2_fu_989_p2 = zext_ln216_fu_974_p1 << zext_ln216_2_fu_985_p1;

assign shl_ln216_3_fu_964_p2 = 4'd1 << zext_ln216_4_fu_960_p1;

assign shl_ln216_4_fu_1091_p3 = {{add_ln216_4_reg_1555}, {3'd0}};

assign shl_ln216_5_fu_1102_p2 = zext_ln216_3_fu_1087_p1 << zext_ln216_5_fu_1098_p1;

assign shl_ln216_6_fu_1034_p2 = 4'd1 << zext_ln216_7_fu_1030_p1;

assign shl_ln216_7_fu_1112_p3 = {{xor_ln216_reg_1581}, {3'd0}};

assign shl_ln216_8_fu_1123_p2 = zext_ln216_6_fu_1108_p1 << zext_ln216_8_fu_1119_p1;

assign shl_ln216_fu_928_p2 = 4'd1 << zext_ln216_1_fu_924_p1;

assign shl_ln223_1_fu_1289_p3 = {{add_ln223_1_reg_1621}, {3'd0}};

assign shl_ln223_2_fu_1300_p2 = zext_ln223_fu_1276_p1 << zext_ln223_2_fu_1296_p1;

assign shl_ln223_3_fu_1326_p2 = 4'd1 << zext_ln223_4_fu_1322_p1;

assign shl_ln223_4_fu_1332_p3 = {{add_ln223_2_fu_1317_p2}, {3'd0}};

assign shl_ln223_5_fu_1344_p2 = zext_ln223_3_fu_1313_p1 << zext_ln223_5_fu_1340_p1;

assign shl_ln223_fu_1283_p2 = 4'd1 << zext_ln223_1_fu_1280_p1;

assign shl_ln2_fu_535_p3 = {{add_ln174_1_reg_1417_pp0_iter71_reg}, {3'd0}};

assign shl_ln3_fu_837_p3 = {{trunc_ln185_fu_833_p1}, {3'd0}};

assign shl_ln4_fu_1306_p3 = {{trunc_ln222_reg_1640}, {4'd0}};

assign sub_ln1311_fu_651_p2 = (8'd127 - tmp_15_fu_605_p4);

assign sub_ln218_fu_1179_p2 = (and_ln_fu_1171_p3 - zext_ln218_fu_1167_p1);

assign tmp_11_fu_1135_p4 = {{tmp_14_reg_1433[31:1]}};

assign tmp_12_fu_1150_p4 = {{tmp_14_reg_1433[30:1]}};

assign tmp_15_fu_605_p4 = {{data_V_fu_594_p1[30:23]}};

assign tmp_16_fu_615_p1 = data_V_fu_594_p1[22:0];

assign tmp_1_fu_754_p4 = {{bitcast_ln174_fu_751_p1[30:23]}};

assign tmp_fu_689_p3 = r_V_fu_677_p2[32'd24];

assign tmp_s_fu_701_p4 = {{r_V_1_fu_683_p2[55:24]}};

assign total_bits_fu_588_p2 = (shl_ln201_fu_576_p2 - shl_ln201_1_fu_582_p2);

assign trunc_ln174_1_fu_764_p1 = bitcast_ln174_fu_751_p1[22:0];

assign trunc_ln174_2_fu_501_p1 = i_reg_371[1:0];

assign trunc_ln174_3_fu_510_p4 = {{add_ln174_fu_505_p2[63:2]}};

assign trunc_ln174_fu_482_p1 = s1[1:0];

assign trunc_ln185_1_fu_854_p1 = lshr_ln185_fu_849_p2[7:0];

assign trunc_ln185_fu_833_p1 = i_4_reg_382[1:0];

assign trunc_ln190_1_fu_910_p1 = ap_phi_mux_j_phi_fu_410_p4[1:0];

assign trunc_ln190_fu_896_p1 = file_buffer[1:0];

assign trunc_ln192_1_fu_1066_p4 = {{cmprs_stream_dout[11:8]}};

assign trunc_ln192_fu_970_p1 = cmprs_stream_dout[3:0];

assign trunc_ln194_fu_1083_p1 = cmprs_stream_dout[7:0];

assign trunc_ln1_fu_1226_p4 = {{add_ln221_fu_1216_p2[63:2]}};

assign trunc_ln216_1_fu_1000_p4 = {{add_ln216_fu_995_p2[63:2]}};

assign trunc_ln216_2_fu_1040_p4 = {{add_ln216_1_fu_1020_p2[63:2]}};

assign trunc_ln218_fu_1197_p1 = sub_ln218_fu_1179_p2[1:0];

assign trunc_ln222_fu_1272_p1 = cmprs_stream_dout[3:0];

assign trunc_ln223_1_fu_1252_p4 = {{add_ln223_fu_1246_p2[63:2]}};

assign trunc_ln6_fu_556_p4 = {{total_bytes[63:2]}};

assign trunc_ln7_fu_876_p4 = {{file_buffer[63:2]}};

assign trunc_ln_fu_934_p4 = {{add_ln190_fu_914_p2[63:2]}};

assign ush_fu_661_p3 = ((isNeg_fu_643_p3[0:0] == 1'b1) ? sext_ln1311_fu_657_p1 : add_ln341_fu_637_p2);

assign val_fu_711_p3 = ((isNeg_fu_643_p3[0:0] == 1'b1) ? zext_ln662_fu_697_p1 : tmp_s_fu_701_p4);

assign xor_ln216_fu_1025_p2 = (2'd2 ^ add_ln216_3_reg_1538);

assign zext_ln15_fu_629_p1 = mantissa_fu_619_p4;

assign zext_ln174_fu_542_p1 = shl_ln2_fu_535_p3;

assign zext_ln177_fu_800_p1 = and_ln177_fu_795_p2;

assign zext_ln185_fu_845_p1 = shl_ln3_fu_837_p3;

assign zext_ln216_1_fu_924_p1 = add_ln216_3_fu_919_p2;

assign zext_ln216_2_fu_985_p1 = shl_ln216_1_fu_978_p3;

assign zext_ln216_3_fu_1087_p1 = or_ln_fu_1076_p3;

assign zext_ln216_4_fu_960_p1 = add_ln216_4_fu_954_p2;

assign zext_ln216_5_fu_1098_p1 = shl_ln216_4_fu_1091_p3;

assign zext_ln216_6_fu_1108_p1 = trunc_ln194_fu_1083_p1;

assign zext_ln216_7_fu_1030_p1 = xor_ln216_fu_1025_p2;

assign zext_ln216_8_fu_1119_p1 = shl_ln216_7_fu_1112_p3;

assign zext_ln216_fu_974_p1 = grp_fu_472_p4;

assign zext_ln218_1_fu_1193_p1 = and_ln1_fu_1185_p3;

assign zext_ln218_fu_1167_p1 = select_ln209_fu_1159_p3;

assign zext_ln223_1_fu_1280_p1 = add_ln223_1_reg_1621;

assign zext_ln223_2_fu_1296_p1 = shl_ln223_1_fu_1289_p3;

assign zext_ln223_3_fu_1313_p1 = shl_ln4_fu_1306_p3;

assign zext_ln223_4_fu_1322_p1 = add_ln223_2_fu_1317_p2;

assign zext_ln223_5_fu_1340_p1 = shl_ln223_4_fu_1332_p3;

assign zext_ln223_fu_1276_p1 = grp_fu_472_p4;

assign zext_ln341_fu_633_p1 = tmp_15_fu_605_p4;

assign zext_ln662_fu_697_p1 = tmp_fu_689_p3;

always @ (posedge ap_clk) begin
    total_bits_reg_1441[1:0] <= 2'b00;
    header_reg_1498[0] <= 1'b0;
end

endmodule //lzw_stream_hardware_encoder
